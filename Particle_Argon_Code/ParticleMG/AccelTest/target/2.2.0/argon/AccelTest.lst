
/Users/maximegordon/Desktop/ParticleMG/AccelTest/target/2.2.0/argon/AccelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003320  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7340  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e478  000d7344  0001e478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000304  2003e4ec  2003e4ec  0002e4ec  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d73b8  000d73b8  000273b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d73e0  000d73e0  000273e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00105dc7  00000000  00000000  000273e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001259f  00000000  00000000  0012d1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025814  00000000  00000000  0013f74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  00164f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006ac8  00000000  00000000  00167346  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033734  00000000  00000000  0016de0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fa8c  00000000  00000000  001a1542  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103e21  00000000  00000000  001d0fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006408  00000000  00000000  002d4df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff95 	bl	d6f60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff9d 	bl	d6f7c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e478 	.word	0x2003e478
   d404c:	000d7344 	.word	0x000d7344
   d4050:	2003e4ec 	.word	0x2003e4ec
   d4054:	2003e4ec 	.word	0x2003e4ec
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 ff3d 	bl	d5ee0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7318 	.word	0x000d7318
   d4080:	000d733c 	.word	0x000d733c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbc8 	b.w	d4818 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f815 	bl	d40b8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bedd 	b.w	d5e50 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f000 bf49 	b.w	d4f2c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bf4f 	b.w	d4f3c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	b2c9      	uxtb	r1, r1
   d40b2:	689b      	ldr	r3, [r3, #8]
   d40b4:	4718      	bx	r3
	...

000d40b8 <loop>:
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
}
void loop() {
   d40b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40bc:	ed2d 8b02 	vpush	{d8}
   d40c0:	b09f      	sub	sp, #124	; 0x7c
  // === Read acceleromter data === //
  Wire.beginTransmission(MPUNIT);
   d40c2:	f001 ff59 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d40c6:	2168      	movs	r1, #104	; 0x68
   d40c8:	f001 f813 	bl	d50f2 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
   d40cc:	f001 ff54 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d40d0:	213b      	movs	r1, #59	; 0x3b
   d40d2:	f7ff ffec 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d40d6:	f001 ff4f 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d40da:	2100      	movs	r1, #0
   d40dc:	f001 f80c 	bl	d50f8 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPUNIT, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
   d40e0:	f001 ff4a 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d40e4:	2206      	movs	r2, #6
   d40e6:	2168      	movs	r1, #104	; 0x68
   d40e8:	2301      	movs	r3, #1
   d40ea:	f000 ffec 	bl	d50c6 <_ZN7TwoWire11requestFromEhjh>
  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
   d40ee:	f001 ff43 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d40f2:	6803      	ldr	r3, [r0, #0]
   d40f4:	f8df a3a4 	ldr.w	sl, [pc, #932]	; d449c <loop+0x3e4>
   d40f8:	695b      	ldr	r3, [r3, #20]
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
   d40fa:	f8df b3a4 	ldr.w	fp, [pc, #932]	; d44a0 <loop+0x3e8>
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
   d40fe:	4798      	blx	r3
   d4100:	4604      	mov	r4, r0
   d4102:	f001 ff39 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4106:	6803      	ldr	r3, [r0, #0]
   d4108:	695b      	ldr	r3, [r3, #20]
   d410a:	4798      	blx	r3
   d410c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4110:	f002 fb8e 	bl	d6830 <__aeabi_i2d>
   d4114:	2200      	movs	r2, #0
   d4116:	4bd4      	ldr	r3, [pc, #848]	; (d4468 <loop+0x3b0>)
   d4118:	f002 fbf4 	bl	d6904 <__aeabi_dmul>
   d411c:	f002 feca 	bl	d6eb4 <__aeabi_d2f>
   d4120:	f8ca 0000 	str.w	r0, [sl]
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
   d4124:	f001 ff28 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4128:	6803      	ldr	r3, [r0, #0]
   d412a:	695b      	ldr	r3, [r3, #20]
   d412c:	4798      	blx	r3
   d412e:	4604      	mov	r4, r0
   d4130:	f001 ff22 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4134:	6803      	ldr	r3, [r0, #0]
   d4136:	695b      	ldr	r3, [r3, #20]
   d4138:	4798      	blx	r3
   d413a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d413e:	f002 fb77 	bl	d6830 <__aeabi_i2d>
   d4142:	2200      	movs	r2, #0
   d4144:	4bc8      	ldr	r3, [pc, #800]	; (d4468 <loop+0x3b0>)
   d4146:	f002 fbdd 	bl	d6904 <__aeabi_dmul>
   d414a:	f002 feb3 	bl	d6eb4 <__aeabi_d2f>
   d414e:	f8cb 0000 	str.w	r0, [fp]
  AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0; // Z-axis value
   d4152:	f001 ff11 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4156:	6803      	ldr	r3, [r0, #0]
   d4158:	695b      	ldr	r3, [r3, #20]
   d415a:	4798      	blx	r3
   d415c:	4604      	mov	r4, r0
   d415e:	f001 ff0b 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4162:	6803      	ldr	r3, [r0, #0]
   d4164:	695b      	ldr	r3, [r3, #20]
   d4166:	4798      	blx	r3
   d4168:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d416c:	f002 fb60 	bl	d6830 <__aeabi_i2d>
   d4170:	2200      	movs	r2, #0
   d4172:	4bbd      	ldr	r3, [pc, #756]	; (d4468 <loop+0x3b0>)
   d4174:	f002 fbc6 	bl	d6904 <__aeabi_dmul>
   d4178:	f002 fe9c 	bl	d6eb4 <__aeabi_d2f>
   d417c:	4bbb      	ldr	r3, [pc, #748]	; (d446c <loop+0x3b4>)
   d417e:	4606      	mov	r6, r0
   d4180:	6018      	str	r0, [r3, #0]
  // Calculating Roll and Pitch from the accelerometer data
  //PI is undefined
  //accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
   d4182:	f8db 0000 	ldr.w	r0, [fp]
   d4186:	f002 fb65 	bl	d6854 <__aeabi_f2d>
   d418a:	4604      	mov	r4, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d418c:	f8da 0000 	ldr.w	r0, [sl]
   d4190:	460d      	mov	r5, r1
   d4192:	f002 fb5f 	bl	d6854 <__aeabi_f2d>
   d4196:	4602      	mov	r2, r0
   d4198:	460b      	mov	r3, r1
   d419a:	4630      	mov	r0, r6
   d419c:	e9cd 2300 	strd	r2, r3, [sp]
   d41a0:	f002 fb58 	bl	d6854 <__aeabi_f2d>
   d41a4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d41a8:	4680      	mov	r8, r0
   d41aa:	4689      	mov	r9, r1
   d41ac:	4610      	mov	r0, r2
   d41ae:	4619      	mov	r1, r3
   d41b0:	f002 fba8 	bl	d6904 <__aeabi_dmul>
   d41b4:	4642      	mov	r2, r8
   d41b6:	4606      	mov	r6, r0
   d41b8:	460f      	mov	r7, r1
   d41ba:	464b      	mov	r3, r9
   d41bc:	4640      	mov	r0, r8
   d41be:	4649      	mov	r1, r9
   d41c0:	f002 fba0 	bl	d6904 <__aeabi_dmul>
   d41c4:	4602      	mov	r2, r0
   d41c6:	460b      	mov	r3, r1
   d41c8:	4630      	mov	r0, r6
   d41ca:	4639      	mov	r1, r7
   d41cc:	f002 f9e4 	bl	d6598 <__adddf3>
   d41d0:	ec41 0b10 	vmov	d0, r0, r1
   d41d4:	f002 f8b6 	bl	d6344 <sqrt>
   d41d8:	4620      	mov	r0, r4
   d41da:	ec53 2b10 	vmov	r2, r3, d0
   d41de:	4629      	mov	r1, r5
   d41e0:	f002 fcba 	bl	d6b58 <__aeabi_ddiv>
   d41e4:	ec41 0b10 	vmov	d0, r0, r1
   d41e8:	f001 feee 	bl	d5fc8 <atan>
   d41ec:	4ba0      	ldr	r3, [pc, #640]	; (d4470 <loop+0x3b8>)
   d41ee:	ec51 0b10 	vmov	r0, r1, d0
   d41f2:	2200      	movs	r2, #0
   d41f4:	f002 fb86 	bl	d6904 <__aeabi_dmul>
   d41f8:	a38b      	add	r3, pc, #556	; (adr r3, d4428 <loop+0x370>)
   d41fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fe:	f002 fcab 	bl	d6b58 <__aeabi_ddiv>
   d4202:	a38b      	add	r3, pc, #556	; (adr r3, d4430 <loop+0x378>)
   d4204:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4208:	f002 f9c4 	bl	d6594 <__aeabi_dsub>
   d420c:	f002 fe52 	bl	d6eb4 <__aeabi_d2f>
   d4210:	4a98      	ldr	r2, [pc, #608]	; (d4474 <loop+0x3bc>)
   d4212:	6010      	str	r0, [r2, #0]
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d4214:	f8da 0000 	ldr.w	r0, [sl]
   d4218:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d421c:	f002 fb1a 	bl	d6854 <__aeabi_f2d>
   d4220:	4604      	mov	r4, r0
   d4222:	f8db 0000 	ldr.w	r0, [fp]
   d4226:	460d      	mov	r5, r1
   d4228:	f002 fb14 	bl	d6854 <__aeabi_f2d>
   d422c:	4b8f      	ldr	r3, [pc, #572]	; (d446c <loop+0x3b4>)
   d422e:	4680      	mov	r8, r0
   d4230:	6818      	ldr	r0, [r3, #0]
   d4232:	4689      	mov	r9, r1
   d4234:	f002 fb0e 	bl	d6854 <__aeabi_f2d>
   d4238:	4602      	mov	r2, r0
   d423a:	460b      	mov	r3, r1
   d423c:	f002 fb62 	bl	d6904 <__aeabi_dmul>
   d4240:	4642      	mov	r2, r8
   d4242:	4606      	mov	r6, r0
   d4244:	460f      	mov	r7, r1
   d4246:	464b      	mov	r3, r9
   d4248:	4640      	mov	r0, r8
   d424a:	4649      	mov	r1, r9
   d424c:	f002 fb5a 	bl	d6904 <__aeabi_dmul>
   d4250:	4602      	mov	r2, r0
   d4252:	460b      	mov	r3, r1
   d4254:	4630      	mov	r0, r6
   d4256:	4639      	mov	r1, r7
   d4258:	f002 f99e 	bl	d6598 <__adddf3>
   d425c:	ec41 0b10 	vmov	d0, r0, r1
   d4260:	f002 f870 	bl	d6344 <sqrt>
   d4264:	4620      	mov	r0, r4
   d4266:	ec53 2b10 	vmov	r2, r3, d0
   d426a:	4629      	mov	r1, r5
   d426c:	f002 fc74 	bl	d6b58 <__aeabi_ddiv>
   d4270:	ec41 0b10 	vmov	d0, r0, r1
   d4274:	f001 fea8 	bl	d5fc8 <atan>
   d4278:	4b7d      	ldr	r3, [pc, #500]	; (d4470 <loop+0x3b8>)
  // === Read gyroscope data === //
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d427a:	4d7f      	ldr	r5, [pc, #508]	; (d4478 <loop+0x3c0>)
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d427c:	4e7f      	ldr	r6, [pc, #508]	; (d447c <loop+0x3c4>)
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d427e:	4c80      	ldr	r4, [pc, #512]	; (d4480 <loop+0x3c8>)
  currentTime = millis();            // Current time actual time read
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d4280:	f8df 8220 	ldr.w	r8, [pc, #544]	; d44a4 <loop+0x3ec>
  Wire.beginTransmission(MPUNIT);
  Wire.write(0x43); // Gyro data first register address 0x43
  Wire.endTransmission(false);
  Wire.requestFrom(MPUNIT, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
   d4284:	4f7f      	ldr	r7, [pc, #508]	; (d4484 <loop+0x3cc>)
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d4286:	ec51 0b10 	vmov	r0, r1, d0
   d428a:	2200      	movs	r2, #0
   d428c:	f002 fb3a 	bl	d6904 <__aeabi_dmul>
   d4290:	a365      	add	r3, pc, #404	; (adr r3, d4428 <loop+0x370>)
   d4292:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4296:	f002 fc5f 	bl	d6b58 <__aeabi_ddiv>
   d429a:	a367      	add	r3, pc, #412	; (adr r3, d4438 <loop+0x380>)
   d429c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a0:	f002 f97a 	bl	d6598 <__adddf3>
   d42a4:	f002 fe06 	bl	d6eb4 <__aeabi_d2f>
  previousTime = currentTime;        // Previous time is stored before the actual time read
   d42a8:	682b      	ldr	r3, [r5, #0]
   d42aa:	6023      	str	r3, [r4, #0]
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d42ac:	6030      	str	r0, [r6, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42ae:	f000 fc61 	bl	d4b74 <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();            // Current time actual time read
   d42b2:	ee07 0a90 	vmov	s15, r0
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42b6:	ed94 7a00 	vldr	s14, [r4]
   d42ba:	eddf 6a73 	vldr	s13, [pc, #460]	; d4488 <loop+0x3d0>
  currentTime = millis();            // Current time actual time read
   d42be:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d42c2:	edc5 7a00 	vstr	s15, [r5]
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
   d42ca:	4d70      	ldr	r5, [pc, #448]	; (d448c <loop+0x3d4>)
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
   d42cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d42d0:	ed88 7a00 	vstr	s14, [r8]
  Wire.beginTransmission(MPUNIT);
   d42d4:	f001 fe50 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d42d8:	2168      	movs	r1, #104	; 0x68
   d42da:	f000 ff0a 	bl	d50f2 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x43); // Gyro data first register address 0x43
   d42de:	f001 fe4b 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d42e2:	2143      	movs	r1, #67	; 0x43
   d42e4:	f7ff fee3 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d42e8:	f001 fe46 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d42ec:	2100      	movs	r1, #0
   d42ee:	f000 ff03 	bl	d50f8 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPUNIT, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
   d42f2:	f001 fe41 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d42f6:	2206      	movs	r2, #6
   d42f8:	2168      	movs	r1, #104	; 0x68
   d42fa:	2301      	movs	r3, #1
   d42fc:	f000 fee3 	bl	d50c6 <_ZN7TwoWire11requestFromEhjh>
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
   d4300:	f001 fe3a 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4304:	6803      	ldr	r3, [r0, #0]
   d4306:	695b      	ldr	r3, [r3, #20]
   d4308:	4798      	blx	r3
   d430a:	4604      	mov	r4, r0
   d430c:	f001 fe34 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4310:	6803      	ldr	r3, [r0, #0]
   d4312:	695b      	ldr	r3, [r3, #20]
   d4314:	4798      	blx	r3
   d4316:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d431a:	f002 fa89 	bl	d6830 <__aeabi_i2d>
   d431e:	a348      	add	r3, pc, #288	; (adr r3, d4440 <loop+0x388>)
   d4320:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4324:	f002 fc18 	bl	d6b58 <__aeabi_ddiv>
   d4328:	f002 fdc4 	bl	d6eb4 <__aeabi_d2f>
   d432c:	6038      	str	r0, [r7, #0]
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
   d432e:	f001 fe23 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4332:	6803      	ldr	r3, [r0, #0]
   d4334:	695b      	ldr	r3, [r3, #20]
   d4336:	4798      	blx	r3
   d4338:	4604      	mov	r4, r0
   d433a:	f001 fe1d 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d433e:	6803      	ldr	r3, [r0, #0]
   d4340:	695b      	ldr	r3, [r3, #20]
   d4342:	4798      	blx	r3
   d4344:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4348:	f002 fa72 	bl	d6830 <__aeabi_i2d>
   d434c:	a33c      	add	r3, pc, #240	; (adr r3, d4440 <loop+0x388>)
   d434e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4352:	f002 fc01 	bl	d6b58 <__aeabi_ddiv>
   d4356:	f002 fdad 	bl	d6eb4 <__aeabi_d2f>
   d435a:	6028      	str	r0, [r5, #0]
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d435c:	f001 fe0c 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4360:	6803      	ldr	r3, [r0, #0]
   d4362:	695b      	ldr	r3, [r3, #20]
   d4364:	4798      	blx	r3
   d4366:	4681      	mov	r9, r0
   d4368:	f001 fe06 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d436c:	6803      	ldr	r3, [r0, #0]
   d436e:	695b      	ldr	r3, [r3, #20]
   d4370:	4798      	blx	r3
   d4372:	4604      	mov	r4, r0
  // Correct the outputs with the calculated error values
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
   d4374:	6838      	ldr	r0, [r7, #0]
   d4376:	f002 fa6d 	bl	d6854 <__aeabi_f2d>
   d437a:	a333      	add	r3, pc, #204	; (adr r3, d4448 <loop+0x390>)
   d437c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4380:	f002 f90a 	bl	d6598 <__adddf3>
   d4384:	f002 fd96 	bl	d6eb4 <__aeabi_d2f>
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d4388:	edd5 7a00 	vldr	s15, [r5]
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
   d438c:	6038      	str	r0, [r7, #0]
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d438e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4392:	ee77 7ac7 	vsub.f32	s15, s15, s14
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d4396:	ea44 2009 	orr.w	r0, r4, r9, lsl #8
  GyroY = GyroY - 2; // GyroErrorY ~(2)
   d439a:	edc5 7a00 	vstr	s15, [r5]
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
   d439e:	f002 fa47 	bl	d6830 <__aeabi_i2d>
   d43a2:	a327      	add	r3, pc, #156	; (adr r3, d4440 <loop+0x388>)
   d43a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43a8:	f002 fbd6 	bl	d6b58 <__aeabi_ddiv>
   d43ac:	f002 fd82 	bl	d6eb4 <__aeabi_d2f>
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
   d43b0:	f002 fa50 	bl	d6854 <__aeabi_f2d>
   d43b4:	a326      	add	r3, pc, #152	; (adr r3, d4450 <loop+0x398>)
   d43b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ba:	f002 f8ed 	bl	d6598 <__adddf3>
   d43be:	f002 fd79 	bl	d6eb4 <__aeabi_d2f>
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  //gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg

gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d43c2:	4f33      	ldr	r7, [pc, #204]	; (d4490 <loop+0x3d8>)
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
   d43c4:	4b33      	ldr	r3, [pc, #204]	; (d4494 <loop+0x3dc>)
   d43c6:	ee08 0a10 	vmov	s16, r0
   d43ca:	6018      	str	r0, [r3, #0]
gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d43cc:	6838      	ldr	r0, [r7, #0]
   d43ce:	f002 fa41 	bl	d6854 <__aeabi_f2d>
   d43d2:	a321      	add	r3, pc, #132	; (adr r3, d4458 <loop+0x3a0>)
   d43d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d8:	f002 fa94 	bl	d6904 <__aeabi_dmul>
   d43dc:	4a25      	ldr	r2, [pc, #148]	; (d4474 <loop+0x3bc>)
   d43de:	4604      	mov	r4, r0
   d43e0:	6810      	ldr	r0, [r2, #0]
   d43e2:	460d      	mov	r5, r1
   d43e4:	f002 fa36 	bl	d6854 <__aeabi_f2d>
   d43e8:	a31d      	add	r3, pc, #116	; (adr r3, d4460 <loop+0x3a8>)
   d43ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ee:	f002 fa89 	bl	d6904 <__aeabi_dmul>
   d43f2:	4602      	mov	r2, r0
   d43f4:	460b      	mov	r3, r1
   d43f6:	4620      	mov	r0, r4
   d43f8:	4629      	mov	r1, r5
   d43fa:	f002 f8cd 	bl	d6598 <__adddf3>
   d43fe:	f002 fd59 	bl	d6eb4 <__aeabi_d2f>
   d4402:	6038      	str	r0, [r7, #0]
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d4404:	4f24      	ldr	r7, [pc, #144]	; (d4498 <loop+0x3e0>)
gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
   d4406:	4681      	mov	r9, r0
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d4408:	6838      	ldr	r0, [r7, #0]
   d440a:	f002 fa23 	bl	d6854 <__aeabi_f2d>
   d440e:	a312      	add	r3, pc, #72	; (adr r3, d4458 <loop+0x3a0>)
   d4410:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4414:	f002 fa76 	bl	d6904 <__aeabi_dmul>
   d4418:	4604      	mov	r4, r0
   d441a:	6830      	ldr	r0, [r6, #0]
   d441c:	460d      	mov	r5, r1
   d441e:	f002 fa19 	bl	d6854 <__aeabi_f2d>
   d4422:	e041      	b.n	d44a8 <loop+0x3f0>
   d4424:	f3af 8000 	nop.w
   d4428:	54442d18 	.word	0x54442d18
   d442c:	400921fb 	.word	0x400921fb
   d4430:	28f5c28f 	.word	0x28f5c28f
   d4434:	3fe28f5c 	.word	0x3fe28f5c
   d4438:	147ae148 	.word	0x147ae148
   d443c:	3ff947ae 	.word	0x3ff947ae
   d4440:	00000000 	.word	0x00000000
   d4444:	40606000 	.word	0x40606000
   d4448:	1eb851ec 	.word	0x1eb851ec
   d444c:	3fe1eb85 	.word	0x3fe1eb85
   d4450:	147ae148 	.word	0x147ae148
   d4454:	3fe947ae 	.word	0x3fe947ae
   d4458:	eb851eb8 	.word	0xeb851eb8
   d445c:	3feeb851 	.word	0x3feeb851
   d4460:	47ae147b 	.word	0x47ae147b
   d4464:	3fa47ae1 	.word	0x3fa47ae1
   d4468:	3f100000 	.word	0x3f100000
   d446c:	2003e4fc 	.word	0x2003e4fc
   d4470:	40668000 	.word	0x40668000
   d4474:	2003e524 	.word	0x2003e524
   d4478:	2003e530 	.word	0x2003e530
   d447c:	2003e528 	.word	0x2003e528
   d4480:	2003e55c 	.word	0x2003e55c
   d4484:	2003e50c 	.word	0x2003e50c
   d4488:	447a0000 	.word	0x447a0000
   d448c:	2003e510 	.word	0x2003e510
   d4490:	2003e538 	.word	0x2003e538
   d4494:	2003e514 	.word	0x2003e514
   d4498:	2003e53c 	.word	0x2003e53c
   d449c:	2003e4f4 	.word	0x2003e4f4
   d44a0:	2003e4f8 	.word	0x2003e4f8
   d44a4:	2003e534 	.word	0x2003e534
   d44a8:	a32c      	add	r3, pc, #176	; (adr r3, d455c <loop+0x4a4>)
   d44aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ae:	f002 fa29 	bl	d6904 <__aeabi_dmul>
   d44b2:	4602      	mov	r2, r0
   d44b4:	460b      	mov	r3, r1
   d44b6:	4620      	mov	r0, r4
   d44b8:	4629      	mov	r1, r5
   d44ba:	f002 f86d 	bl	d6598 <__adddf3>
   d44be:	f002 fcf9 	bl	d6eb4 <__aeabi_d2f>

roll = gyroAngleX;
   d44c2:	4b1d      	ldr	r3, [pc, #116]	; (d4538 <loop+0x480>)
pitch = gyroAngleY;
  
//gyroAngleY = gyroAngleY + GyroY * elapsedTime;
 yaw =  yaw + GyroZ * elapsedTime;
   d44c4:	ed98 7a00 	vldr	s14, [r8]
roll = gyroAngleX;
   d44c8:	f8c3 9000 	str.w	r9, [r3]
pitch = gyroAngleY;
   d44cc:	4b1b      	ldr	r3, [pc, #108]	; (d453c <loop+0x484>)
    // Serial.print(" ");
    // Serial.println(AccZ);
    //  delay(50);

     //SEND OSC
    OSCMessage outMessage("/test");
   d44ce:	491c      	ldr	r1, [pc, #112]	; (d4540 <loop+0x488>)
pitch = gyroAngleY;
   d44d0:	6018      	str	r0, [r3, #0]
 yaw =  yaw + GyroZ * elapsedTime;
   d44d2:	4b1c      	ldr	r3, [pc, #112]	; (d4544 <loop+0x48c>)
gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
   d44d4:	6038      	str	r0, [r7, #0]
 yaw =  yaw + GyroZ * elapsedTime;
   d44d6:	edd3 7a00 	vldr	s15, [r3]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d44da:	4d1b      	ldr	r5, [pc, #108]	; (d4548 <loop+0x490>)
   d44dc:	eee8 7a07 	vfma.f32	s15, s16, s14
    OSCMessage outMessage("/test");
   d44e0:	a809      	add	r0, sp, #36	; 0x24
   d44e2:	ac04      	add	r4, sp, #16
 yaw =  yaw + GyroZ * elapsedTime;
   d44e4:	edc3 7a00 	vstr	s15, [r3]
    OSCMessage outMessage("/test");
   d44e8:	f000 fa34 	bl	d4954 <_ZN10OSCMessageC1EPKc>
    outMessage.addFloat(AccX);
   d44ec:	ed9a 0a00 	vldr	s0, [sl]
   d44f0:	a809      	add	r0, sp, #36	; 0x24
   d44f2:	f000 fa6e 	bl	d49d2 <_ZN10OSCMessage8addFloatEf>
   outMessage.addFloat(AccY);
   d44f6:	ed9b 0a00 	vldr	s0, [fp]
   d44fa:	a809      	add	r0, sp, #36	; 0x24
   d44fc:	f000 fa69 	bl	d49d2 <_ZN10OSCMessage8addFloatEf>
   outMessage.addFloat(AccZ);
   d4500:	4b12      	ldr	r3, [pc, #72]	; (d454c <loop+0x494>)
   d4502:	a809      	add	r0, sp, #36	; 0x24
   d4504:	ed93 0a00 	vldr	s0, [r3]
   d4508:	f000 fa63 	bl	d49d2 <_ZN10OSCMessage8addFloatEf>
   d450c:	4b10      	ldr	r3, [pc, #64]	; (d4550 <loop+0x498>)
   d450e:	9303      	str	r3, [sp, #12]
   d4510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4514:	682b      	ldr	r3, [r5, #0]
   d4516:	7023      	strb	r3, [r4, #0]
    outMessage.send(udp,outIp,outPort);
   d4518:	4b0e      	ldr	r3, [pc, #56]	; (d4554 <loop+0x49c>)
   d451a:	490f      	ldr	r1, [pc, #60]	; (d4558 <loop+0x4a0>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	aa03      	add	r2, sp, #12
   d4520:	a809      	add	r0, sp, #36	; 0x24
   d4522:	f000 fa81 	bl	d4a28 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
    OSCMessage outMessage("/test");
   d4526:	a809      	add	r0, sp, #36	; 0x24
   d4528:	f000 fa36 	bl	d4998 <_ZN10OSCMessageD1Ev>
}
   d452c:	b01f      	add	sp, #124	; 0x7c
   d452e:	ecbd 8b02 	vpop	{d8}
   d4532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4536:	bf00      	nop
   d4538:	2003e560 	.word	0x2003e560
   d453c:	2003e558 	.word	0x2003e558
   d4540:	000d70d4 	.word	0x000d70d4
   d4544:	2003e5b0 	.word	0x2003e5b0
   d4548:	2003e544 	.word	0x2003e544
   d454c:	2003e4fc 	.word	0x2003e4fc
   d4550:	000d7158 	.word	0x000d7158
   d4554:	2003e478 	.word	0x2003e478
   d4558:	2003e564 	.word	0x2003e564
   d455c:	47ae147b 	.word	0x47ae147b
   d4560:	3fa47ae1 	.word	0x3fa47ae1
   d4564:	00000000 	.word	0x00000000

000d4568 <_Z19calculate_IMU_errorv>:
void calculate_IMU_error() {
   d4568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // We can call this funtion in the setup section to calculate the accelerometer and gyro data error. From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values
  // Read accelerometer values 200 times
  while (c < 200) {
   d456c:	4c9c      	ldr	r4, [pc, #624]	; (d47e0 <_Z19calculate_IMU_errorv+0x278>)
    Wire.beginTransmission(MPUNIT);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPUNIT, 6, true);
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d456e:	4f9d      	ldr	r7, [pc, #628]	; (d47e4 <_Z19calculate_IMU_errorv+0x27c>)
void calculate_IMU_error() {
   d4570:	ed2d 8b06 	vpush	{d8-d10}
   d4574:	4625      	mov	r5, r4
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d4576:	2600      	movs	r6, #0
  while (c < 200) {
   d4578:	6823      	ldr	r3, [r4, #0]
   d457a:	2bc7      	cmp	r3, #199	; 0xc7
   d457c:	dc5e      	bgt.n	d463c <_Z19calculate_IMU_errorv+0xd4>
    Wire.beginTransmission(MPUNIT);
   d457e:	f001 fcfb 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4582:	2168      	movs	r1, #104	; 0x68
   d4584:	f000 fdb5 	bl	d50f2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x3B);
   d4588:	f001 fcf6 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d458c:	213b      	movs	r1, #59	; 0x3b
   d458e:	f7ff fd8e 	bl	d40ae <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);
   d4592:	f001 fcf1 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4596:	2100      	movs	r1, #0
   d4598:	f000 fdae 	bl	d50f8 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(MPUNIT, 6, true);
   d459c:	f001 fcec 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d45a0:	2206      	movs	r2, #6
   d45a2:	2168      	movs	r1, #104	; 0x68
   d45a4:	2301      	movs	r3, #1
   d45a6:	f000 fd8e 	bl	d50c6 <_ZN7TwoWire11requestFromEhjh>
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d45aa:	f001 fce5 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d45ae:	6803      	ldr	r3, [r0, #0]
   d45b0:	695b      	ldr	r3, [r3, #20]
   d45b2:	4798      	blx	r3
   d45b4:	4680      	mov	r8, r0
   d45b6:	f001 fcdf 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d45ba:	6803      	ldr	r3, [r0, #0]
   d45bc:	695b      	ldr	r3, [r3, #20]
   d45be:	4798      	blx	r3
   d45c0:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d45c4:	f002 f934 	bl	d6830 <__aeabi_i2d>
   d45c8:	4632      	mov	r2, r6
   d45ca:	463b      	mov	r3, r7
   d45cc:	f002 f99a 	bl	d6904 <__aeabi_dmul>
   d45d0:	f002 fc70 	bl	d6eb4 <__aeabi_d2f>
   d45d4:	4b84      	ldr	r3, [pc, #528]	; (d47e8 <_Z19calculate_IMU_errorv+0x280>)
   d45d6:	6018      	str	r0, [r3, #0]
    AccY = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d45d8:	f001 fcce 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d45dc:	6803      	ldr	r3, [r0, #0]
   d45de:	695b      	ldr	r3, [r3, #20]
   d45e0:	4798      	blx	r3
   d45e2:	4680      	mov	r8, r0
   d45e4:	f001 fcc8 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d45e8:	6803      	ldr	r3, [r0, #0]
   d45ea:	695b      	ldr	r3, [r3, #20]
   d45ec:	4798      	blx	r3
   d45ee:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d45f2:	f002 f91d 	bl	d6830 <__aeabi_i2d>
   d45f6:	4632      	mov	r2, r6
   d45f8:	463b      	mov	r3, r7
   d45fa:	f002 f983 	bl	d6904 <__aeabi_dmul>
   d45fe:	f002 fc59 	bl	d6eb4 <__aeabi_d2f>
   d4602:	4b7a      	ldr	r3, [pc, #488]	; (d47ec <_Z19calculate_IMU_errorv+0x284>)
   d4604:	6018      	str	r0, [r3, #0]
    AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
   d4606:	f001 fcb7 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d460a:	6803      	ldr	r3, [r0, #0]
   d460c:	695b      	ldr	r3, [r3, #20]
   d460e:	4798      	blx	r3
   d4610:	4680      	mov	r8, r0
   d4612:	f001 fcb1 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4616:	6803      	ldr	r3, [r0, #0]
   d4618:	695b      	ldr	r3, [r3, #20]
   d461a:	4798      	blx	r3
   d461c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   d4620:	f002 f906 	bl	d6830 <__aeabi_i2d>
   d4624:	463b      	mov	r3, r7
   d4626:	4632      	mov	r2, r6
   d4628:	f002 f96c 	bl	d6904 <__aeabi_dmul>
   d462c:	f002 fc42 	bl	d6eb4 <__aeabi_d2f>
   d4630:	4b6f      	ldr	r3, [pc, #444]	; (d47f0 <_Z19calculate_IMU_errorv+0x288>)
   d4632:	6018      	str	r0, [r3, #0]
    // Sum all readings
    //AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / PI));
    //AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / PI));
    c++;
   d4634:	6823      	ldr	r3, [r4, #0]
   d4636:	3301      	adds	r3, #1
   d4638:	6023      	str	r3, [r4, #0]
  while (c < 200) {
   d463a:	e79d      	b.n	d4578 <_Z19calculate_IMU_errorv+0x10>
  }
  //Divide the sum by 200 to get the error value
  AccErrorX = AccErrorX / 200;
   d463c:	4b6d      	ldr	r3, [pc, #436]	; (d47f4 <_Z19calculate_IMU_errorv+0x28c>)
   d463e:	ed9f 8a6e 	vldr	s16, [pc, #440]	; d47f8 <_Z19calculate_IMU_errorv+0x290>
   d4642:	ed93 7a00 	vldr	s14, [r3]
  while (c < 200) {
    Wire.beginTransmission(MPUNIT);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPUNIT, 6, true);
    GyroX = Wire.read() << 8 | Wire.read();
   d4646:	f8df 81c4 	ldr.w	r8, [pc, #452]	; d480c <_Z19calculate_IMU_errorv+0x2a4>
  AccErrorX = AccErrorX / 200;
   d464a:	eec7 7a08 	vdiv.f32	s15, s14, s16
    GyroY = Wire.read() << 8 | Wire.read();
    GyroZ = Wire.read() << 8 | Wire.read();
    // Sum all readings
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d464e:	f20f 1b88 	addw	fp, pc, #392	; 0x188
   d4652:	e9db ab00 	ldrd	sl, fp, [fp]
  AccErrorX = AccErrorX / 200;
   d4656:	edc3 7a00 	vstr	s15, [r3]
  AccErrorY = AccErrorY / 200;
   d465a:	4b68      	ldr	r3, [pc, #416]	; (d47fc <_Z19calculate_IMU_errorv+0x294>)
   d465c:	ed93 7a00 	vldr	s14, [r3]
   d4660:	eec7 7a08 	vdiv.f32	s15, s14, s16
   d4664:	edc3 7a00 	vstr	s15, [r3]
  c = 0;
   d4668:	2300      	movs	r3, #0
   d466a:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission(MPUNIT);
   d466c:	f001 fc84 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4670:	2168      	movs	r1, #104	; 0x68
   d4672:	f000 fd3e 	bl	d50f2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x43);
   d4676:	f001 fc7f 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d467a:	2143      	movs	r1, #67	; 0x43
   d467c:	f7ff fd17 	bl	d40ae <_ZN7TwoWire5writeEi>
    Wire.endTransmission(false);
   d4680:	f001 fc7a 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4684:	2100      	movs	r1, #0
   d4686:	f000 fd37 	bl	d50f8 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(MPUNIT, 6, true);
   d468a:	f001 fc75 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d468e:	2206      	movs	r2, #6
   d4690:	2168      	movs	r1, #104	; 0x68
   d4692:	2301      	movs	r3, #1
   d4694:	f000 fd17 	bl	d50c6 <_ZN7TwoWire11requestFromEhjh>
    GyroX = Wire.read() << 8 | Wire.read();
   d4698:	f001 fc6e 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d469c:	6803      	ldr	r3, [r0, #0]
    GyroY = Wire.read() << 8 | Wire.read();
   d469e:	f8df 9170 	ldr.w	r9, [pc, #368]	; d4810 <_Z19calculate_IMU_errorv+0x2a8>
    GyroX = Wire.read() << 8 | Wire.read();
   d46a2:	695b      	ldr	r3, [r3, #20]
   d46a4:	4798      	blx	r3
   d46a6:	4604      	mov	r4, r0
   d46a8:	f001 fc66 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d46ac:	6803      	ldr	r3, [r0, #0]
   d46ae:	695b      	ldr	r3, [r3, #20]
   d46b0:	4798      	blx	r3
   d46b2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d46b6:	ee07 0a90 	vmov	s15, r0
   d46ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46be:	edc8 7a00 	vstr	s15, [r8]
    GyroY = Wire.read() << 8 | Wire.read();
   d46c2:	f001 fc59 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d46c6:	6803      	ldr	r3, [r0, #0]
   d46c8:	695b      	ldr	r3, [r3, #20]
   d46ca:	4798      	blx	r3
   d46cc:	4604      	mov	r4, r0
   d46ce:	f001 fc53 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d46d2:	6803      	ldr	r3, [r0, #0]
   d46d4:	695b      	ldr	r3, [r3, #20]
   d46d6:	4798      	blx	r3
   d46d8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d46dc:	ee07 0a90 	vmov	s15, r0
   d46e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46e4:	edc9 7a00 	vstr	s15, [r9]
    GyroZ = Wire.read() << 8 | Wire.read();
   d46e8:	f001 fc46 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d46ec:	6803      	ldr	r3, [r0, #0]
   d46ee:	695b      	ldr	r3, [r3, #20]
   d46f0:	4798      	blx	r3
   d46f2:	4604      	mov	r4, r0
   d46f4:	f001 fc40 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d46f8:	6803      	ldr	r3, [r0, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	4798      	blx	r3
   d46fe:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4702:	ee07 0a90 	vmov	s15, r0
   d4706:	4b3e      	ldr	r3, [pc, #248]	; (d4800 <_Z19calculate_IMU_errorv+0x298>)
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d4708:	f8d8 0000 	ldr.w	r0, [r8]
   d470c:	4c3d      	ldr	r4, [pc, #244]	; (d4804 <_Z19calculate_IMU_errorv+0x29c>)
    GyroZ = Wire.read() << 8 | Wire.read();
   d470e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d4712:	edc3 8a00 	vstr	s17, [r3]
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
   d4716:	f002 f89d 	bl	d6854 <__aeabi_f2d>
   d471a:	4652      	mov	r2, sl
   d471c:	465b      	mov	r3, fp
   d471e:	f002 fa1b 	bl	d6b58 <__aeabi_ddiv>
   d4722:	4606      	mov	r6, r0
   d4724:	6820      	ldr	r0, [r4, #0]
   d4726:	460f      	mov	r7, r1
   d4728:	f002 f894 	bl	d6854 <__aeabi_f2d>
   d472c:	4602      	mov	r2, r0
   d472e:	460b      	mov	r3, r1
   d4730:	4630      	mov	r0, r6
   d4732:	4639      	mov	r1, r7
   d4734:	f001 ff30 	bl	d6598 <__adddf3>
   d4738:	f002 fbbc 	bl	d6eb4 <__aeabi_d2f>
   d473c:	6020      	str	r0, [r4, #0]
   d473e:	ee09 0a90 	vmov	s19, r0
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
   d4742:	f8d9 0000 	ldr.w	r0, [r9]
   d4746:	f8df 90cc 	ldr.w	r9, [pc, #204]	; d4814 <_Z19calculate_IMU_errorv+0x2ac>
   d474a:	f002 f883 	bl	d6854 <__aeabi_f2d>
   d474e:	4652      	mov	r2, sl
   d4750:	465b      	mov	r3, fp
   d4752:	f002 fa01 	bl	d6b58 <__aeabi_ddiv>
   d4756:	4606      	mov	r6, r0
   d4758:	f8d9 0000 	ldr.w	r0, [r9]
   d475c:	460f      	mov	r7, r1
   d475e:	f002 f879 	bl	d6854 <__aeabi_f2d>
   d4762:	4602      	mov	r2, r0
   d4764:	460b      	mov	r3, r1
   d4766:	4630      	mov	r0, r6
   d4768:	4639      	mov	r1, r7
   d476a:	f001 ff15 	bl	d6598 <__adddf3>
   d476e:	f002 fba1 	bl	d6eb4 <__aeabi_d2f>
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d4772:	4e25      	ldr	r6, [pc, #148]	; (d4808 <_Z19calculate_IMU_errorv+0x2a0>)
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
   d4774:	f8c9 0000 	str.w	r0, [r9]
   d4778:	ee09 0a10 	vmov	s18, r0
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d477c:	6830      	ldr	r0, [r6, #0]
   d477e:	f002 f869 	bl	d6854 <__aeabi_f2d>
   d4782:	ec41 0b1a 	vmov	d10, r0, r1
   d4786:	ee18 0a90 	vmov	r0, s17
   d478a:	f002 f863 	bl	d6854 <__aeabi_f2d>
   d478e:	4652      	mov	r2, sl
   d4790:	465b      	mov	r3, fp
   d4792:	f002 f9e1 	bl	d6b58 <__aeabi_ddiv>
   d4796:	460b      	mov	r3, r1
   d4798:	4602      	mov	r2, r0
   d479a:	ec51 0b1a 	vmov	r0, r1, d10
   d479e:	f001 fefb 	bl	d6598 <__adddf3>
   d47a2:	f002 fb87 	bl	d6eb4 <__aeabi_d2f>
    c++;
   d47a6:	682b      	ldr	r3, [r5, #0]
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d47a8:	6030      	str	r0, [r6, #0]
    c++;
   d47aa:	3301      	adds	r3, #1
  while (c < 200) {
   d47ac:	2bc7      	cmp	r3, #199	; 0xc7
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
   d47ae:	ee07 0a90 	vmov	s15, r0
    c++;
   d47b2:	602b      	str	r3, [r5, #0]
  while (c < 200) {
   d47b4:	f77f af5a 	ble.w	d466c <_Z19calculate_IMU_errorv+0x104>
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
   d47b8:	ee89 7a88 	vdiv.f32	s14, s19, s16
   d47bc:	ed84 7a00 	vstr	s14, [r4]
  GyroErrorY = GyroErrorY / 200;
   d47c0:	ee89 7a08 	vdiv.f32	s14, s18, s16
   d47c4:	ed89 7a00 	vstr	s14, [r9]
  GyroErrorZ = GyroErrorZ / 200;
   d47c8:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d47cc:	ed86 7a00 	vstr	s14, [r6]
  // Serial.println(GyroErrorX);
  // Serial.print("GyroErrorY: ");
  // Serial.println(GyroErrorY);
  // Serial.print("GyroErrorZ: ");
  // Serial.println(GyroErrorZ);
}
   d47d0:	ecbd 8b06 	vpop	{d8-d10}
   d47d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47d8:	00000000 	.word	0x00000000
   d47dc:	40606000 	.word	0x40606000
   d47e0:	2003e52c 	.word	0x2003e52c
   d47e4:	3f100000 	.word	0x3f100000
   d47e8:	2003e4f4 	.word	0x2003e4f4
   d47ec:	2003e4f8 	.word	0x2003e4f8
   d47f0:	2003e4fc 	.word	0x2003e4fc
   d47f4:	2003e4ec 	.word	0x2003e4ec
   d47f8:	43480000 	.word	0x43480000
   d47fc:	2003e4f0 	.word	0x2003e4f0
   d4800:	2003e514 	.word	0x2003e514
   d4804:	2003e500 	.word	0x2003e500
   d4808:	2003e508 	.word	0x2003e508
   d480c:	2003e50c 	.word	0x2003e50c
   d4810:	2003e510 	.word	0x2003e510
   d4814:	2003e504 	.word	0x2003e504

000d4818 <setup>:
void setup() {
   d4818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.begin(19200);
   d481c:	f001 fa92 	bl	d5d44 <_Z16_fetch_usbserialv>
   d4820:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
   d4824:	f001 fa7e 	bl	d5d24 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4828:	2000      	movs	r0, #0
   d482a:	f000 f9ab 	bl	d4b84 <hal_timer_millis>
   d482e:	f04f 0900 	mov.w	r9, #0
   d4832:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4834:	f241 3687 	movw	r6, #4999	; 0x1387
   d4838:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d483a:	2000      	movs	r0, #0
   d483c:	f000 f9a2 	bl	d4b84 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4840:	ebb0 0408 	subs.w	r4, r0, r8
   d4844:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4848:	42af      	cmp	r7, r5
   d484a:	bf08      	it	eq
   d484c:	42a6      	cmpeq	r6, r4
   d484e:	d307      	bcc.n	d4860 <setup+0x48>
  waitFor(Serial.isConnected, 5000);
   d4850:	f001 fa78 	bl	d5d44 <_Z16_fetch_usbserialv>
   d4854:	f001 fa6a 	bl	d5d2c <_ZN9USBSerial11isConnectedEv>
   d4858:	b910      	cbnz	r0, d4860 <setup+0x48>
            spark_process();
   d485a:	f000 faf7 	bl	d4e4c <spark_process>
        while (_while() && !_condition()) {
   d485e:	e7ec      	b.n	d483a <setup+0x22>
   d4860:	f001 fa70 	bl	d5d44 <_Z16_fetch_usbserialv>
   d4864:	f001 fa62 	bl	d5d2c <_ZN9USBSerial11isConnectedEv>
  Wire.begin();                      // Initialize comunication
   d4868:	f001 fb86 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d486c:	f000 fc0e 	bl	d508c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPUNIT);       // Start communication with MPU6050 // MPU=0x68
   d4870:	f001 fb82 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4874:	2168      	movs	r1, #104	; 0x68
   d4876:	f000 fc3c 	bl	d50f2 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);                  // Talk to the register 6B
   d487a:	f001 fb7d 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d487e:	216b      	movs	r1, #107	; 0x6b
   d4880:	f7ff fc15 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
   d4884:	f001 fb78 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4888:	2100      	movs	r1, #0
   d488a:	f7ff fc10 	bl	d40ae <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);        //end the transmission
   d488e:	f001 fb73 	bl	d5f78 <_Z19__fetch_global_Wirev>
   d4892:	2101      	movs	r1, #1
   d4894:	f000 fc30 	bl	d50f8 <_ZN7TwoWire15endTransmissionEh>
  calculate_IMU_error();
   d4898:	f7ff fe66 	bl	d4568 <_Z19calculate_IMU_errorv>
  delay(20);
   d489c:	2014      	movs	r0, #20
   d489e:	f000 fb6d 	bl	d4f7c <delay>
    udp.begin(0);//necessary even for sending only.
   d48a2:	2200      	movs	r2, #0
   d48a4:	4810      	ldr	r0, [pc, #64]	; (d48e8 <setup+0xd0>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d48a6:	4d11      	ldr	r5, [pc, #68]	; (d48ec <setup+0xd4>)
        Serial.print(".");
   d48a8:	4c11      	ldr	r4, [pc, #68]	; (d48f0 <setup+0xd8>)
    udp.begin(0);//necessary even for sending only.
   d48aa:	4611      	mov	r1, r2
   d48ac:	f000 feda 	bl	d5664 <_ZN3UDP5beginEtm>
   d48b0:	2200      	movs	r2, #0
   d48b2:	6868      	ldr	r0, [r5, #4]
   d48b4:	4611      	mov	r1, r2
   d48b6:	f000 faf1 	bl	d4e9c <network_ready>
    while (!WiFi.ready())
   d48ba:	b948      	cbnz	r0, d48d0 <setup+0xb8>
        delay(500);
   d48bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d48c0:	f000 fb5c 	bl	d4f7c <delay>
        Serial.print(".");
   d48c4:	f001 fa3e 	bl	d5d44 <_Z16_fetch_usbserialv>
   d48c8:	4621      	mov	r1, r4
   d48ca:	f000 fd8d 	bl	d53e8 <_ZN5Print5printEPKc>
    while (!WiFi.ready())
   d48ce:	e7ef      	b.n	d48b0 <setup+0x98>
    Serial.println("");
   d48d0:	f001 fa38 	bl	d5d44 <_Z16_fetch_usbserialv>
   d48d4:	4907      	ldr	r1, [pc, #28]	; (d48f4 <setup+0xdc>)
   d48d6:	f000 fd9a 	bl	d540e <_ZN5Print7printlnEPKc>
    Serial.println("WiFi connected");
   d48da:	f001 fa33 	bl	d5d44 <_Z16_fetch_usbserialv>
}
   d48de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Serial.println("WiFi connected");
   d48e2:	4905      	ldr	r1, [pc, #20]	; (d48f8 <setup+0xe0>)
   d48e4:	f000 bd93 	b.w	d540e <_ZN5Print7printlnEPKc>
   d48e8:	2003e564 	.word	0x2003e564
   d48ec:	2003e728 	.word	0x2003e728
   d48f0:	000d70da 	.word	0x000d70da
   d48f4:	000d70db 	.word	0x000d70db
   d48f8:	000d70dc 	.word	0x000d70dc

000d48fc <_GLOBAL__sub_I_SystemMode>:
}
   d48fc:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   d48fe:	2100      	movs	r1, #0
   d4900:	2001      	movs	r0, #1
   d4902:	f000 fa87 	bl	d4e14 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   d4906:	4b0c      	ldr	r3, [pc, #48]	; (d4938 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d4908:	2200      	movs	r2, #0
   d490a:	601a      	str	r2, [r3, #0]
   d490c:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d490e:	719a      	strb	r2, [r3, #6]
   d4910:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d4914:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   d4916:	2001      	movs	r0, #1
   d4918:	f000 fa6c 	bl	d4df4 <set_system_mode>
UDP udp;
   d491c:	4807      	ldr	r0, [pc, #28]	; (d493c <_GLOBAL__sub_I_SystemMode+0x40>)
   d491e:	f001 f893 	bl	d5a48 <_ZN3UDPC1Ev>
IPAddress outIp(192, 168, 1, 106);//your computer IP
   d4922:	236a      	movs	r3, #106	; 0x6a
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	22a8      	movs	r2, #168	; 0xa8
   d4928:	2301      	movs	r3, #1
   d492a:	21c0      	movs	r1, #192	; 0xc0
   d492c:	4804      	ldr	r0, [pc, #16]	; (d4940 <_GLOBAL__sub_I_SystemMode+0x44>)
   d492e:	f000 fc65 	bl	d51fc <_ZN9IPAddressC1Ehhhh>
}
   d4932:	b003      	add	sp, #12
   d4934:	f85d fb04 	ldr.w	pc, [sp], #4
   d4938:	2003e518 	.word	0x2003e518
   d493c:	2003e564 	.word	0x2003e564
   d4940:	2003e540 	.word	0x2003e540

000d4944 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d4944:	2300      	movs	r3, #0
    inputDatas = NULL;
    incomingBufferSize = 0;
    
    outputDatas = NULL;
    outputDatasSize = 0;
   d4946:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    incomingBuffer = NULL;
   d494a:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d494c:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d494e:	6043      	str	r3, [r0, #4]
}
   d4950:	4770      	bx	lr
	...

000d4954 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage(const char * address)
   d4954:	b570      	push	{r4, r5, r6, lr}
   d4956:	4604      	mov	r4, r0
   d4958:	460d      	mov	r5, r1
   d495a:	3008      	adds	r0, #8
   d495c:	490d      	ldr	r1, [pc, #52]	; (d4994 <_ZN10OSCMessageC1EPKc+0x40>)
   d495e:	f000 fdd0 	bl	d5502 <_ZN6StringC1EPKc>
   d4962:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d4966:	490b      	ldr	r1, [pc, #44]	; (d4994 <_ZN10OSCMessageC1EPKc+0x40>)
   d4968:	f104 0018 	add.w	r0, r4, #24
   d496c:	f000 fdc9 	bl	d5502 <_ZN6StringC1EPKc>
   d4970:	4908      	ldr	r1, [pc, #32]	; (d4994 <_ZN10OSCMessageC1EPKc+0x40>)
   d4972:	4630      	mov	r0, r6
   d4974:	f000 fdc5 	bl	d5502 <_ZN6StringC1EPKc>
   d4978:	4906      	ldr	r1, [pc, #24]	; (d4994 <_ZN10OSCMessageC1EPKc+0x40>)
   d497a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d497e:	f000 fdc0 	bl	d5502 <_ZN6StringC1EPKc>
    setupMessage();
   d4982:	4620      	mov	r0, r4
   d4984:	f7ff ffde 	bl	d4944 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d4988:	4629      	mov	r1, r5
   d498a:	4630      	mov	r0, r6
   d498c:	f000 fdcd 	bl	d552a <_ZN6StringaSEPKc>
}
   d4990:	4620      	mov	r0, r4
   d4992:	bd70      	pop	{r4, r5, r6, pc}
   d4994:	000d70db 	.word	0x000d70db

000d4998 <_ZN10OSCMessageD1Ev>:

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d4998:	b510      	push	{r4, lr}
   d499a:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d499c:	6800      	ldr	r0, [r0, #0]
   d499e:	f000 facd 	bl	d4f3c <free>
    free(inputDatas);
   d49a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d49a4:	f000 faca 	bl	d4f3c <free>
    free(outputDatas);
   d49a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d49aa:	f000 fac7 	bl	d4f3c <free>
OSCMessage::~OSCMessage()
   d49ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d49b2:	f000 fd5b 	bl	d546c <_ZN6StringD1Ev>
   d49b6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d49ba:	f000 fd57 	bl	d546c <_ZN6StringD1Ev>
   d49be:	f104 0018 	add.w	r0, r4, #24
   d49c2:	f000 fd53 	bl	d546c <_ZN6StringD1Ev>
   d49c6:	f104 0008 	add.w	r0, r4, #8
   d49ca:	f000 fd4f 	bl	d546c <_ZN6StringD1Ev>
}
   d49ce:	4620      	mov	r0, r4
   d49d0:	bd10      	pop	{r4, pc}

000d49d2 <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d49d2:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d49d4:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
   d49d6:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d49d8:	3104      	adds	r1, #4
   d49da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   d49dc:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d49e0:	f000 fab4 	bl	d4f4c <realloc>
   d49e4:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d49e6:	b1e8      	cbz	r0, d4a24 <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d49e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d49ea:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d49ee:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d49f0:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d49f4:	440a      	add	r2, r1
   d49f6:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d49fa:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d49fc:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4a00:	440a      	add	r2, r1
   d4a02:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d4a06:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d4a08:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4a0c:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d4a0e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        outputDatas[outputDatasSize+3] = u.b[0];
   d4a12:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d4a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4a16:	3304      	adds	r3, #4
   d4a18:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d4a1a:	2166      	movs	r1, #102	; 0x66
    }
}
   d4a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputTypes.concat('f');
   d4a20:	f000 bdac 	b.w	d557c <_ZN6String6concatEc>
}
   d4a24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a28 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d4a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a2c:	b08b      	sub	sp, #44	; 0x2c
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d4a2e:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
   d4a32:	af00      	add	r7, sp, #0
   d4a34:	4680      	mov	r8, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4a36:	4648      	mov	r0, r9
{
   d4a38:	460d      	mov	r5, r1
   d4a3a:	e9c7 3202 	strd	r3, r2, [r7, #8]
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4a3e:	f002 fad1 	bl	d6fe4 <strlen>
   d4a42:	4606      	mov	r6, r0
   d4a44:	3003      	adds	r0, #3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d4a46:	0880      	lsrs	r0, r0, #2
   d4a48:	f001 fee2 	bl	d6810 <__aeabi_ui2d>
   d4a4c:	4b3f      	ldr	r3, [pc, #252]	; (d4b4c <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d4a4e:	2200      	movs	r2, #0
   d4a50:	f001 fda2 	bl	d6598 <__adddf3>
   d4a54:	f002 fa06 	bl	d6e64 <__aeabi_d2iz>
   d4a58:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d4a5c:	ebc6 0680 	rsb	r6, r6, r0, lsl #2
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4a60:	0084      	lsls	r4, r0, #2
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d4a62:	4650      	mov	r0, sl
   d4a64:	f002 fabe 	bl	d6fe4 <strlen>
    int outputBufferSize = addressBitCount+1;//address+padding+comma
   d4a68:	3401      	adds	r4, #1
    outputBufferSize += strlen(outputTypes);
   d4a6a:	4683      	mov	fp, r0
   d4a6c:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
   d4a6e:	3001      	adds	r0, #1
   d4a70:	0880      	lsrs	r0, r0, #2
   d4a72:	f001 fecd 	bl	d6810 <__aeabi_ui2d>
   d4a76:	4b35      	ldr	r3, [pc, #212]	; (d4b4c <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d4a78:	2200      	movs	r2, #0
   d4a7a:	f001 fd8d 	bl	d6598 <__adddf3>
   d4a7e:	f002 f9f1 	bl	d6e64 <__aeabi_d2iz>
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d4a82:	f1cb 0303 	rsb	r3, fp, #3
   d4a86:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d4a8a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   d4a8e:	603b      	str	r3, [r7, #0]
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d4a90:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d4a92:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d4a94:	1de2      	adds	r2, r4, #7
   d4a96:	f022 0207 	bic.w	r2, r2, #7
   d4a9a:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d4a9e:	2100      	movs	r1, #0
   d4aa0:	4622      	mov	r2, r4
   d4aa2:	4668      	mov	r0, sp
   d4aa4:	f002 fa6a 	bl	d6f7c <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d4aa8:	4648      	mov	r0, r9
   d4aaa:	f002 fa9b 	bl	d6fe4 <strlen>
   d4aae:	4649      	mov	r1, r9
   d4ab0:	4602      	mov	r2, r0
   d4ab2:	4668      	mov	r0, sp
   d4ab4:	f002 fa54 	bl	d6f60 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d4ab8:	4648      	mov	r0, r9
   d4aba:	f002 fa93 	bl	d6fe4 <strlen>
   d4abe:	eb0d 0206 	add.w	r2, sp, r6
   d4ac2:	212c      	movs	r1, #44	; 0x2c
   d4ac4:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d4ac6:	4648      	mov	r0, r9
   d4ac8:	f002 fa8c 	bl	d6fe4 <strlen>
   d4acc:	6078      	str	r0, [r7, #4]
   d4ace:	4650      	mov	r0, sl
   d4ad0:	f002 fa88 	bl	d6fe4 <strlen>
   d4ad4:	6879      	ldr	r1, [r7, #4]
   d4ad6:	3101      	adds	r1, #1
   d4ad8:	4602      	mov	r2, r0
   d4ada:	1988      	adds	r0, r1, r6
   d4adc:	4468      	add	r0, sp
   d4ade:	4651      	mov	r1, sl
   d4ae0:	f002 fa3e 	bl	d6f60 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d4ae4:	4648      	mov	r0, r9
   d4ae6:	f002 fa7d 	bl	d6fe4 <strlen>
   d4aea:	4681      	mov	r9, r0
   d4aec:	4650      	mov	r0, sl
   d4aee:	f002 fa79 	bl	d6fe4 <strlen>
   d4af2:	4448      	add	r0, r9
   d4af4:	3001      	adds	r0, #1
   d4af6:	683b      	ldr	r3, [r7, #0]
   d4af8:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   d4afc:	4430      	add	r0, r6
   d4afe:	4458      	add	r0, fp
   d4b00:	461a      	mov	r2, r3
   d4b02:	4468      	add	r0, sp
   d4b04:	f002 fa2c 	bl	d6f60 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d4b08:	682b      	ldr	r3, [r5, #0]
   d4b0a:	68fe      	ldr	r6, [r7, #12]
   d4b0c:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4b10:	4b0f      	ldr	r3, [pc, #60]	; (d4b50 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d4b12:	613b      	str	r3, [r7, #16]
   d4b14:	3604      	adds	r6, #4
   d4b16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4b18:	f107 0c14 	add.w	ip, r7, #20
   d4b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d4b20:	6833      	ldr	r3, [r6, #0]
   d4b22:	f88c 3000 	strb.w	r3, [ip]
   d4b26:	893a      	ldrh	r2, [r7, #8]
   d4b28:	f107 0110 	add.w	r1, r7, #16
   d4b2c:	4628      	mov	r0, r5
   d4b2e:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d4b30:	682b      	ldr	r3, [r5, #0]
   d4b32:	4622      	mov	r2, r4
   d4b34:	4669      	mov	r1, sp
   d4b36:	68db      	ldr	r3, [r3, #12]
   d4b38:	4628      	mov	r0, r5
   d4b3a:	4798      	blx	r3
    udp.endPacket();
   d4b3c:	682b      	ldr	r3, [r5, #0]
   d4b3e:	4628      	mov	r0, r5
   d4b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b42:	4798      	blx	r3
}
   d4b44:	372c      	adds	r7, #44	; 0x2c
   d4b46:	46bd      	mov	sp, r7
   d4b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b4c:	3fe00000 	.word	0x3fe00000
   d4b50:	000d7158 	.word	0x000d7158

000d4b54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <os_mutex_recursive_create+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030248 	.word	0x00030248

000d4b64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_RNG_GetRandomNumber+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	685b      	ldr	r3, [r3, #4]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030218 	.word	0x00030218

000d4b74 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	695b      	ldr	r3, [r3, #20]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030218 	.word	0x00030218

000d4b84 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <hal_timer_millis+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030218 	.word	0x00030218

000d4b94 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <hal_i2c_begin+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	68db      	ldr	r3, [r3, #12]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030228 	.word	0x00030228

000d4ba4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <hal_i2c_begin_transmission+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	699b      	ldr	r3, [r3, #24]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030228 	.word	0x00030228

000d4bb4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <hal_i2c_end_transmission+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	69db      	ldr	r3, [r3, #28]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030228 	.word	0x00030228

000d4bc4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <hal_i2c_write+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a1b      	ldr	r3, [r3, #32]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030228 	.word	0x00030228

000d4bd4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <hal_i2c_available+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030228 	.word	0x00030228

000d4be4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <hal_i2c_read+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030228 	.word	0x00030228

000d4bf4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <hal_i2c_peek+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030228 	.word	0x00030228

000d4c04 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <hal_i2c_flush+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030228 	.word	0x00030228

000d4c14 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <hal_i2c_init+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030228 	.word	0x00030228

000d4c24 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <hal_i2c_request_ex+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030228 	.word	0x00030228

000d4c34 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <if_index_to_name+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	695b      	ldr	r3, [r3, #20]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003026c 	.word	0x0003026c

000d4c44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <inet_inet_ntop+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	695b      	ldr	r3, [r3, #20]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030264 	.word	0x00030264

000d4c54 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <inet_htonl+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a1b      	ldr	r3, [r3, #32]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030264 	.word	0x00030264

000d4c64 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <inet_ntohs+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030264 	.word	0x00030264

000d4c74 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <inet_htons+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030264 	.word	0x00030264

000d4c84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <netdb_freeaddrinfo+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	689b      	ldr	r3, [r3, #8]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030268 	.word	0x00030268

000d4c94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <netdb_getaddrinfo+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	68db      	ldr	r3, [r3, #12]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030268 	.word	0x00030268

000d4ca4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <sock_bind+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	685b      	ldr	r3, [r3, #4]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030238 	.word	0x00030238

000d4cb4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <sock_setsockopt+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	699b      	ldr	r3, [r3, #24]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030238 	.word	0x00030238

000d4cc4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <sock_close+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	69db      	ldr	r3, [r3, #28]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030238 	.word	0x00030238

000d4cd4 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <sock_recvfrom+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030238 	.word	0x00030238

000d4ce4 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <sock_sendto+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030238 	.word	0x00030238

000d4cf4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <sock_socket+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030238 	.word	0x00030238

000d4d04 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <hal_usart_init+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	681b      	ldr	r3, [r3, #0]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003023c 	.word	0x0003023c

000d4d14 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <hal_usart_write+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	68db      	ldr	r3, [r3, #12]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003023c 	.word	0x0003023c

000d4d24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <hal_usart_available+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	691b      	ldr	r3, [r3, #16]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003023c 	.word	0x0003023c

000d4d34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <hal_usart_read+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003023c 	.word	0x0003023c

000d4d44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <hal_usart_peek+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	699b      	ldr	r3, [r3, #24]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003023c 	.word	0x0003023c

000d4d54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <hal_usart_flush+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	69db      	ldr	r3, [r3, #28]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003023c 	.word	0x0003023c

000d4d64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <hal_usart_available_data_for_write+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USB_USART_Init+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	681b      	ldr	r3, [r3, #0]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003024c 	.word	0x0003024c

000d4d84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USB_USART_Begin+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	685b      	ldr	r3, [r3, #4]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003024c 	.word	0x0003024c

000d4d94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USB_USART_Available_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	691b      	ldr	r3, [r3, #16]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003024c 	.word	0x0003024c

000d4da4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	695b      	ldr	r3, [r3, #20]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003024c 	.word	0x0003024c

000d4db4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_USB_USART_Receive_Data+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	699b      	ldr	r3, [r3, #24]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003024c 	.word	0x0003024c

000d4dc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_USB_USART_Send_Data+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	69db      	ldr	r3, [r3, #28]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003024c 	.word	0x0003024c

000d4dd4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_USB_USART_Flush_Data+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6a1b      	ldr	r3, [r3, #32]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003024c 	.word	0x0003024c

000d4de4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_USB_USART_Is_Connected+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003024c 	.word	0x0003024c

000d4df4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <set_system_mode+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	685b      	ldr	r3, [r3, #4]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030220 	.word	0x00030220

000d4e04 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <system_delay_ms+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	695b      	ldr	r3, [r3, #20]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030220 	.word	0x00030220

000d4e14 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <system_thread_set_state+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030220 	.word	0x00030220

000d4e24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b03      	ldr	r3, [pc, #12]	; (d4e34 <system_ctrl_set_app_request_handler+0x10>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4e2e:	9301      	str	r3, [sp, #4]
   d4e30:	bd08      	pop	{r3, pc}
   d4e32:	0000      	.short	0x0000
   d4e34:	00030220 	.word	0x00030220

000d4e38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b03      	ldr	r3, [pc, #12]	; (d4e48 <system_ctrl_set_result+0x10>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4e42:	9301      	str	r3, [sp, #4]
   d4e44:	bd08      	pop	{r3, pc}
   d4e46:	0000      	.short	0x0000
   d4e48:	00030220 	.word	0x00030220

000d4e4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <spark_process+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	689b      	ldr	r3, [r3, #8]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030244 	.word	0x00030244

000d4e5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030244 	.word	0x00030244

000d4e6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <network_connect+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	685b      	ldr	r3, [r3, #4]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030240 	.word	0x00030240

000d4e7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <network_connecting+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	689b      	ldr	r3, [r3, #8]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030240 	.word	0x00030240

000d4e8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <network_disconnect+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	68db      	ldr	r3, [r3, #12]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030240 	.word	0x00030240

000d4e9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <network_ready+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	691b      	ldr	r3, [r3, #16]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030240 	.word	0x00030240

000d4eac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <network_on+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030240 	.word	0x00030240

000d4ebc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <network_off+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	699b      	ldr	r3, [r3, #24]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030240 	.word	0x00030240

000d4ecc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <network_listen+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	69db      	ldr	r3, [r3, #28]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030240 	.word	0x00030240

000d4edc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <network_listening+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6a1b      	ldr	r3, [r3, #32]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030240 	.word	0x00030240

000d4eec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <network_set_listen_timeout+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030240 	.word	0x00030240

000d4efc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <network_get_listen_timeout+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030240 	.word	0x00030240

000d4f0c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <network_is_on+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030240 	.word	0x00030240

000d4f1c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <network_is_off+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030240 	.word	0x00030240

000d4f2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <malloc+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	681b      	ldr	r3, [r3, #0]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003021c 	.word	0x0003021c

000d4f3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <free+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	685b      	ldr	r3, [r3, #4]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003021c 	.word	0x0003021c

000d4f4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <realloc+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	689b      	ldr	r3, [r3, #8]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003021c 	.word	0x0003021c

000d4f5c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <__errno+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003021c 	.word	0x0003021c

000d4f6c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <newlib_impure_ptr_callback+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003021c 	.word	0x0003021c

000d4f7c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f7c:	2100      	movs	r1, #0
   d4f7e:	f7ff bf41 	b.w	d4e04 <system_delay_ms>
	...

000d4f84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f84:	4802      	ldr	r0, [pc, #8]	; (d4f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4f86:	2300      	movs	r3, #0
   d4f88:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f8a:	f7ff bde3 	b.w	d4b54 <os_mutex_recursive_create>
   d4f8e:	bf00      	nop
   d4f90:	2003e5b4 	.word	0x2003e5b4

000d4f94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f94:	2200      	movs	r2, #0
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	4611      	mov	r1, r2
   d4f9a:	f7ff bf9f 	b.w	d4edc <network_listening>

000d4f9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4f9e:	2200      	movs	r2, #0
   d4fa0:	6840      	ldr	r0, [r0, #4]
   d4fa2:	4611      	mov	r1, r2
   d4fa4:	f7ff bfaa 	b.w	d4efc <network_get_listen_timeout>

000d4fa8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	2200      	movs	r2, #0
   d4fac:	f7ff bf9e 	b.w	d4eec <network_set_listen_timeout>

000d4fb0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fb0:	6840      	ldr	r0, [r0, #4]
   d4fb2:	2200      	movs	r2, #0
   d4fb4:	f081 0101 	eor.w	r1, r1, #1
   d4fb8:	f7ff bf88 	b.w	d4ecc <network_listen>

000d4fbc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4fbc:	2300      	movs	r3, #0
   d4fbe:	6840      	ldr	r0, [r0, #4]
   d4fc0:	461a      	mov	r2, r3
   d4fc2:	4619      	mov	r1, r3
   d4fc4:	f7ff bf7a 	b.w	d4ebc <network_off>

000d4fc8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4fc8:	2300      	movs	r3, #0
   d4fca:	6840      	ldr	r0, [r0, #4]
   d4fcc:	461a      	mov	r2, r3
   d4fce:	4619      	mov	r1, r3
   d4fd0:	f7ff bf6c 	b.w	d4eac <network_on>

000d4fd4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	4611      	mov	r1, r2
   d4fda:	f7ff bf5f 	b.w	d4e9c <network_ready>

000d4fde <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4fde:	2200      	movs	r2, #0
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	4611      	mov	r1, r2
   d4fe4:	f7ff bf4a 	b.w	d4e7c <network_connecting>

000d4fe8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4fe8:	6840      	ldr	r0, [r0, #4]
   d4fea:	2200      	movs	r2, #0
   d4fec:	2102      	movs	r1, #2
   d4fee:	f7ff bf4d 	b.w	d4e8c <network_disconnect>

000d4ff2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ff2:	2300      	movs	r3, #0
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	461a      	mov	r2, r3
   d4ff8:	f7ff bf38 	b.w	d4e6c <network_connect>

000d4ffc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ffc:	4b02      	ldr	r3, [pc, #8]	; (d5008 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ffe:	2203      	movs	r2, #3
   d5000:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5002:	4a02      	ldr	r2, [pc, #8]	; (d500c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5004:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5006:	4770      	bx	lr
   d5008:	2003e5b8 	.word	0x2003e5b8
   d500c:	000d70f4 	.word	0x000d70f4

000d5010 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5010:	4770      	bx	lr

000d5012 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5014:	4606      	mov	r6, r0
   d5016:	4615      	mov	r5, r2
   d5018:	460c      	mov	r4, r1
   d501a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d501c:	42bc      	cmp	r4, r7
   d501e:	d006      	beq.n	d502e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5020:	6833      	ldr	r3, [r6, #0]
   d5022:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5026:	689b      	ldr	r3, [r3, #8]
   d5028:	4630      	mov	r0, r6
   d502a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d502c:	e7f6      	b.n	d501c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d502e:	4628      	mov	r0, r5
   d5030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5032 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5032:	7c00      	ldrb	r0, [r0, #16]
   d5034:	2200      	movs	r2, #0
   d5036:	f7ff bdc5 	b.w	d4bc4 <hal_i2c_write>

000d503a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d503a:	7c00      	ldrb	r0, [r0, #16]
   d503c:	2100      	movs	r1, #0
   d503e:	f7ff bdc9 	b.w	d4bd4 <hal_i2c_available>

000d5042 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5042:	7c00      	ldrb	r0, [r0, #16]
   d5044:	2100      	movs	r1, #0
   d5046:	f7ff bdcd 	b.w	d4be4 <hal_i2c_read>

000d504a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d504a:	7c00      	ldrb	r0, [r0, #16]
   d504c:	2100      	movs	r1, #0
   d504e:	f7ff bdd1 	b.w	d4bf4 <hal_i2c_peek>

000d5052 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5052:	7c00      	ldrb	r0, [r0, #16]
   d5054:	2100      	movs	r1, #0
   d5056:	f7ff bdd5 	b.w	d4c04 <hal_i2c_flush>

000d505a <_ZN7TwoWireD0Ev>:
   d505a:	b510      	push	{r4, lr}
   d505c:	2114      	movs	r1, #20
   d505e:	4604      	mov	r4, r0
   d5060:	f000 ffae 	bl	d5fc0 <_ZdlPvj>
   d5064:	4620      	mov	r0, r4
   d5066:	bd10      	pop	{r4, pc}

000d5068 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5068:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d506a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d506e:	4604      	mov	r4, r0
   d5070:	4608      	mov	r0, r1
   d5072:	2100      	movs	r1, #0
   d5074:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5078:	4b03      	ldr	r3, [pc, #12]	; (d5088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d507a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d507c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d507e:	4611      	mov	r1, r2
   d5080:	f7ff fdc8 	bl	d4c14 <hal_i2c_init>
}
   d5084:	4620      	mov	r0, r4
   d5086:	bd10      	pop	{r4, pc}
   d5088:	000d7130 	.word	0x000d7130

000d508c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d508c:	2300      	movs	r3, #0
   d508e:	7c00      	ldrb	r0, [r0, #16]
   d5090:	461a      	mov	r2, r3
   d5092:	4619      	mov	r1, r3
   d5094:	f7ff bd7e 	b.w	d4b94 <hal_i2c_begin>

000d5098 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d509a:	2200      	movs	r2, #0
   d509c:	2314      	movs	r3, #20
   d509e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d50a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d50a6:	780b      	ldrb	r3, [r1, #0]
   d50a8:	f88d 3008 	strb.w	r3, [sp, #8]
   d50ac:	684b      	ldr	r3, [r1, #4]
   d50ae:	9303      	str	r3, [sp, #12]
   d50b0:	68cb      	ldr	r3, [r1, #12]
   d50b2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d50b4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d50b6:	7a0b      	ldrb	r3, [r1, #8]
   d50b8:	9305      	str	r3, [sp, #20]
   d50ba:	a901      	add	r1, sp, #4
   d50bc:	f7ff fdb2 	bl	d4c24 <hal_i2c_request_ex>
}
   d50c0:	b007      	add	sp, #28
   d50c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d50c6 <_ZN7TwoWire11requestFromEhjh>:
{
   d50c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d50c8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d50ca:	f88d 1000 	strb.w	r1, [sp]
   d50ce:	f04f 0164 	mov.w	r1, #100	; 0x64
   d50d2:	9103      	str	r1, [sp, #12]
   d50d4:	bf18      	it	ne
   d50d6:	2301      	movne	r3, #1
   d50d8:	4669      	mov	r1, sp
    size_ = size;
   d50da:	9201      	str	r2, [sp, #4]
   d50dc:	f88d 3008 	strb.w	r3, [sp, #8]
   d50e0:	f7ff ffda 	bl	d5098 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d50e4:	b005      	add	sp, #20
   d50e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d50ea <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d50ea:	7c00      	ldrb	r0, [r0, #16]
   d50ec:	2200      	movs	r2, #0
   d50ee:	f7ff bd59 	b.w	d4ba4 <hal_i2c_begin_transmission>

000d50f2 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d50f2:	b2c9      	uxtb	r1, r1
   d50f4:	f7ff bff9 	b.w	d50ea <_ZN7TwoWire17beginTransmissionEh>

000d50f8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d50f8:	7c00      	ldrb	r0, [r0, #16]
   d50fa:	2200      	movs	r2, #0
   d50fc:	f7ff bd5a 	b.w	d4bb4 <hal_i2c_end_transmission>

000d5100 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5100:	4770      	bx	lr

000d5102 <_ZN9IPAddressD0Ev>:
   d5102:	b510      	push	{r4, lr}
   d5104:	2118      	movs	r1, #24
   d5106:	4604      	mov	r4, r0
   d5108:	f000 ff5a 	bl	d5fc0 <_ZdlPvj>
   d510c:	4620      	mov	r0, r4
   d510e:	bd10      	pop	{r4, pc}

000d5110 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5110:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5112:	7d03      	ldrb	r3, [r0, #20]
   d5114:	2b06      	cmp	r3, #6
{
   d5116:	b08d      	sub	sp, #52	; 0x34
   d5118:	460e      	mov	r6, r1
   d511a:	f100 0704 	add.w	r7, r0, #4
   d511e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5122:	d012      	beq.n	d514a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5124:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5128:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d512c:	220a      	movs	r2, #10
   d512e:	4630      	mov	r0, r6
   d5130:	f000 f977 	bl	d5422 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5134:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5136:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5138:	d019      	beq.n	d516e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d513a:	2c00      	cmp	r4, #0
   d513c:	d0f4      	beq.n	d5128 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d513e:	212e      	movs	r1, #46	; 0x2e
   d5140:	4630      	mov	r0, r6
   d5142:	f000 f955 	bl	d53f0 <_ZN5Print5printEc>
   d5146:	4404      	add	r4, r0
   d5148:	e7ee      	b.n	d5128 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d514a:	232f      	movs	r3, #47	; 0x2f
   d514c:	466a      	mov	r2, sp
   d514e:	4639      	mov	r1, r7
   d5150:	200a      	movs	r0, #10
		buf[0] = 0;
   d5152:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5156:	f7ff fd75 	bl	d4c44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d515a:	4668      	mov	r0, sp
   d515c:	f001 ff42 	bl	d6fe4 <strlen>
   d5160:	6833      	ldr	r3, [r6, #0]
   d5162:	4602      	mov	r2, r0
   d5164:	68db      	ldr	r3, [r3, #12]
   d5166:	4669      	mov	r1, sp
   d5168:	4630      	mov	r0, r6
   d516a:	4798      	blx	r3
   d516c:	4604      	mov	r4, r0
    }
    return n;
}
   d516e:	4620      	mov	r0, r4
   d5170:	b00d      	add	sp, #52	; 0x34
   d5172:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5174 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5174:	b510      	push	{r4, lr}
   d5176:	4b05      	ldr	r3, [pc, #20]	; (d518c <_ZN9IPAddressC1Ev+0x18>)
   d5178:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d517a:	2211      	movs	r2, #17
   d517c:	f840 3b04 	str.w	r3, [r0], #4
   d5180:	2100      	movs	r1, #0
   d5182:	f001 fefb 	bl	d6f7c <memset>
}
   d5186:	4620      	mov	r0, r4
   d5188:	bd10      	pop	{r4, pc}
   d518a:	bf00      	nop
   d518c:	000d7158 	.word	0x000d7158

000d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5190:	4603      	mov	r3, r0
   d5192:	4a07      	ldr	r2, [pc, #28]	; (d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5194:	b510      	push	{r4, lr}
   d5196:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d519a:	f101 0210 	add.w	r2, r1, #16
   d519e:	f851 4b04 	ldr.w	r4, [r1], #4
   d51a2:	f843 4b04 	str.w	r4, [r3], #4
   d51a6:	4291      	cmp	r1, r2
   d51a8:	d1f9      	bne.n	d519e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51aa:	780a      	ldrb	r2, [r1, #0]
   d51ac:	701a      	strb	r2, [r3, #0]
}
   d51ae:	bd10      	pop	{r4, pc}
   d51b0:	000d7158 	.word	0x000d7158

000d51b4 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d51b4:	7d03      	ldrb	r3, [r0, #20]
   d51b6:	2b04      	cmp	r3, #4
   d51b8:	d104      	bne.n	d51c4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d51ba:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d51bc:	3800      	subs	r0, #0
   d51be:	bf18      	it	ne
   d51c0:	2001      	movne	r0, #1
   d51c2:	4770      	bx	lr
    } else if (version() == 6) {
   d51c4:	2b06      	cmp	r3, #6
   d51c6:	d107      	bne.n	d51d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d51c8:	6843      	ldr	r3, [r0, #4]
   d51ca:	b93b      	cbnz	r3, d51dc <_ZNK9IPAddresscvbEv+0x28>
   d51cc:	6883      	ldr	r3, [r0, #8]
   d51ce:	b92b      	cbnz	r3, d51dc <_ZNK9IPAddresscvbEv+0x28>
   d51d0:	68c3      	ldr	r3, [r0, #12]
   d51d2:	b91b      	cbnz	r3, d51dc <_ZNK9IPAddresscvbEv+0x28>
   d51d4:	6900      	ldr	r0, [r0, #16]
   d51d6:	e7f1      	b.n	d51bc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d51d8:	2000      	movs	r0, #0
   d51da:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d51dc:	2001      	movs	r0, #1
}
   d51de:	4770      	bx	lr

000d51e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d51e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d51f2:	2304      	movs	r3, #4
   d51f4:	6041      	str	r1, [r0, #4]
   d51f6:	7503      	strb	r3, [r0, #20]
}
   d51f8:	bd10      	pop	{r4, pc}
	...

000d51fc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d51fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51fe:	4d04      	ldr	r5, [pc, #16]	; (d5210 <_ZN9IPAddressC1Ehhhh+0x14>)
   d5200:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d5202:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d5206:	9500      	str	r5, [sp, #0]
   d5208:	f7ff ffea 	bl	d51e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d520c:	b003      	add	sp, #12
   d520e:	bd30      	pop	{r4, r5, pc}
   d5210:	000d7158 	.word	0x000d7158

000d5214 <_ZN9IPAddressaSEPKh>:
{
   d5214:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5216:	78cb      	ldrb	r3, [r1, #3]
   d5218:	9300      	str	r3, [sp, #0]
   d521a:	788b      	ldrb	r3, [r1, #2]
   d521c:	784a      	ldrb	r2, [r1, #1]
   d521e:	7809      	ldrb	r1, [r1, #0]
   d5220:	f7ff ffde 	bl	d51e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5224:	b002      	add	sp, #8
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5228:	4b01      	ldr	r3, [pc, #4]	; (d5230 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d522a:	4a02      	ldr	r2, [pc, #8]	; (d5234 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d522c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d522e:	4770      	bx	lr
   d5230:	2003e5c0 	.word	0x2003e5c0
   d5234:	000d7164 	.word	0x000d7164

000d5238 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5238:	2300      	movs	r3, #0
   d523a:	6840      	ldr	r0, [r0, #4]
   d523c:	461a      	mov	r2, r3
   d523e:	f7ff be15 	b.w	d4e6c <network_connect>

000d5242 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5242:	6840      	ldr	r0, [r0, #4]
   d5244:	2200      	movs	r2, #0
   d5246:	2102      	movs	r1, #2
   d5248:	f7ff be20 	b.w	d4e8c <network_disconnect>

000d524c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d524c:	2200      	movs	r2, #0
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	4611      	mov	r1, r2
   d5252:	f7ff be13 	b.w	d4e7c <network_connecting>

000d5256 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5256:	2200      	movs	r2, #0
   d5258:	6840      	ldr	r0, [r0, #4]
   d525a:	4611      	mov	r1, r2
   d525c:	f7ff be1e 	b.w	d4e9c <network_ready>

000d5260 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5260:	2300      	movs	r3, #0
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	461a      	mov	r2, r3
   d5266:	4619      	mov	r1, r3
   d5268:	f7ff be20 	b.w	d4eac <network_on>

000d526c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d526c:	2300      	movs	r3, #0
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	461a      	mov	r2, r3
   d5272:	4619      	mov	r1, r3
   d5274:	f7ff be22 	b.w	d4ebc <network_off>

000d5278 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5278:	6840      	ldr	r0, [r0, #4]
   d527a:	2100      	movs	r1, #0
   d527c:	f7ff be46 	b.w	d4f0c <network_is_on>

000d5280 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	2100      	movs	r1, #0
   d5284:	f7ff be4a 	b.w	d4f1c <network_is_off>

000d5288 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5288:	6840      	ldr	r0, [r0, #4]
   d528a:	2200      	movs	r2, #0
   d528c:	f081 0101 	eor.w	r1, r1, #1
   d5290:	f7ff be1c 	b.w	d4ecc <network_listen>

000d5294 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	2200      	movs	r2, #0
   d5298:	f7ff be28 	b.w	d4eec <network_set_listen_timeout>

000d529c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d529c:	2200      	movs	r2, #0
   d529e:	6840      	ldr	r0, [r0, #4]
   d52a0:	4611      	mov	r1, r2
   d52a2:	f7ff be2b 	b.w	d4efc <network_get_listen_timeout>

000d52a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52a6:	2200      	movs	r2, #0
   d52a8:	6840      	ldr	r0, [r0, #4]
   d52aa:	4611      	mov	r1, r2
   d52ac:	f7ff be16 	b.w	d4edc <network_listening>

000d52b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52b4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d52b6:	b095      	sub	sp, #84	; 0x54
   d52b8:	4616      	mov	r6, r2
   d52ba:	460d      	mov	r5, r1
   d52bc:	4607      	mov	r7, r0
    IPAddress addr;
   d52be:	f7ff ff59 	bl	d5174 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d52c2:	4621      	mov	r1, r4
   d52c4:	2218      	movs	r2, #24
   d52c6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d52c8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52ca:	f001 fe57 	bl	d6f7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52ce:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d52d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52d4:	4621      	mov	r1, r4
   d52d6:	466b      	mov	r3, sp
   d52d8:	aa0c      	add	r2, sp, #48	; 0x30
   d52da:	4630      	mov	r0, r6
   d52dc:	f7ff fcda 	bl	d4c94 <netdb_getaddrinfo>
    if (!r) {
   d52e0:	4604      	mov	r4, r0
   d52e2:	2800      	cmp	r0, #0
   d52e4:	d146      	bne.n	d5374 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52e6:	4602      	mov	r2, r0
   d52e8:	2101      	movs	r1, #1
   d52ea:	6868      	ldr	r0, [r5, #4]
   d52ec:	f7ff fdd6 	bl	d4e9c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52f4:	4622      	mov	r2, r4
   d52f6:	6868      	ldr	r0, [r5, #4]
   d52f8:	f7ff fdd0 	bl	d4e9c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52fe:	4681      	mov	r9, r0
        bool ok = false;
   d5300:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5302:	2e00      	cmp	r6, #0
   d5304:	d036      	beq.n	d5374 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5306:	2900      	cmp	r1, #0
   d5308:	d134      	bne.n	d5374 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d530a:	6873      	ldr	r3, [r6, #4]
   d530c:	2b02      	cmp	r3, #2
   d530e:	d003      	beq.n	d5318 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5310:	2b0a      	cmp	r3, #10
   d5312:	d00b      	beq.n	d532c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5314:	69f6      	ldr	r6, [r6, #28]
   d5316:	e7f4      	b.n	d5302 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5318:	f1b8 0f00 	cmp.w	r8, #0
   d531c:	d004      	beq.n	d5328 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d531e:	6971      	ldr	r1, [r6, #20]
   d5320:	4638      	mov	r0, r7
   d5322:	3104      	adds	r1, #4
   d5324:	f7ff ff76 	bl	d5214 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5328:	4641      	mov	r1, r8
   d532a:	e7f3      	b.n	d5314 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d532c:	f1b9 0f00 	cmp.w	r9, #0
   d5330:	d101      	bne.n	d5336 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5332:	4649      	mov	r1, r9
   d5334:	e7ee      	b.n	d5314 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5336:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5338:	2210      	movs	r2, #16
   d533a:	a801      	add	r0, sp, #4
   d533c:	f001 fe1e 	bl	d6f7c <memset>
                    a.v = 6;
   d5340:	2306      	movs	r3, #6
   d5342:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5346:	ad01      	add	r5, sp, #4
   d5348:	f104 0308 	add.w	r3, r4, #8
   d534c:	3418      	adds	r4, #24
   d534e:	6818      	ldr	r0, [r3, #0]
   d5350:	6859      	ldr	r1, [r3, #4]
   d5352:	462a      	mov	r2, r5
   d5354:	c203      	stmia	r2!, {r0, r1}
   d5356:	3308      	adds	r3, #8
   d5358:	42a3      	cmp	r3, r4
   d535a:	4615      	mov	r5, r2
   d535c:	d1f7      	bne.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d535e:	a901      	add	r1, sp, #4
   d5360:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5362:	ad07      	add	r5, sp, #28
   d5364:	f7ff ff14 	bl	d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d536a:	1d3c      	adds	r4, r7, #4
   d536c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d536e:	682b      	ldr	r3, [r5, #0]
   d5370:	7023      	strb	r3, [r4, #0]
   d5372:	e7de      	b.n	d5332 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5374:	9800      	ldr	r0, [sp, #0]
   d5376:	f7ff fc85 	bl	d4c84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d537a:	4638      	mov	r0, r7
   d537c:	b015      	add	sp, #84	; 0x54
   d537e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5384 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5384:	4b02      	ldr	r3, [pc, #8]	; (d5390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5386:	4a03      	ldr	r2, [pc, #12]	; (d5394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5388:	601a      	str	r2, [r3, #0]
   d538a:	2200      	movs	r2, #0
   d538c:	605a      	str	r2, [r3, #4]

} // spark
   d538e:	4770      	bx	lr
   d5390:	2003e5c4 	.word	0x2003e5c4
   d5394:	000d7170 	.word	0x000d7170

000d5398 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d539a:	4606      	mov	r6, r0
   d539c:	460d      	mov	r5, r1
  size_t n = 0;
   d539e:	188f      	adds	r7, r1, r2
   d53a0:	2400      	movs	r4, #0
  while (size--) {
   d53a2:	42bd      	cmp	r5, r7
   d53a4:	d00c      	beq.n	d53c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53a6:	6833      	ldr	r3, [r6, #0]
   d53a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53ac:	689b      	ldr	r3, [r3, #8]
   d53ae:	4630      	mov	r0, r6
   d53b0:	4798      	blx	r3
     if (chunk>=0)
   d53b2:	1e03      	subs	r3, r0, #0
   d53b4:	db01      	blt.n	d53ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53b6:	441c      	add	r4, r3
  while (size--) {
   d53b8:	e7f3      	b.n	d53a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53ba:	2c00      	cmp	r4, #0
   d53bc:	bf08      	it	eq
   d53be:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d53c0:	4620      	mov	r0, r4
   d53c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d53c4:	b513      	push	{r0, r1, r4, lr}
   d53c6:	4604      	mov	r4, r0
    }
   d53c8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d53ca:	b159      	cbz	r1, d53e4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d53cc:	9101      	str	r1, [sp, #4]
   d53ce:	f001 fe09 	bl	d6fe4 <strlen>
   d53d2:	6823      	ldr	r3, [r4, #0]
   d53d4:	9901      	ldr	r1, [sp, #4]
   d53d6:	68db      	ldr	r3, [r3, #12]
   d53d8:	4602      	mov	r2, r0
   d53da:	4620      	mov	r0, r4
    }
   d53dc:	b002      	add	sp, #8
   d53de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d53e2:	4718      	bx	r3
    }
   d53e4:	b002      	add	sp, #8
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d53e8:	b508      	push	{r3, lr}
  return write(str);
   d53ea:	f7ff ffeb 	bl	d53c4 <_ZN5Print5writeEPKc>
}
   d53ee:	bd08      	pop	{r3, pc}

000d53f0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d53f0:	6803      	ldr	r3, [r0, #0]
   d53f2:	689b      	ldr	r3, [r3, #8]
   d53f4:	4718      	bx	r3

000d53f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53f8:	210d      	movs	r1, #13
{
   d53fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d53fc:	f7ff fff8 	bl	d53f0 <_ZN5Print5printEc>
  n += print('\n');
   d5400:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5402:	4604      	mov	r4, r0
  n += print('\n');
   d5404:	4628      	mov	r0, r5
   d5406:	f7ff fff3 	bl	d53f0 <_ZN5Print5printEc>
  return n;
}
   d540a:	4420      	add	r0, r4
   d540c:	bd38      	pop	{r3, r4, r5, pc}

000d540e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d540e:	b538      	push	{r3, r4, r5, lr}
   d5410:	4605      	mov	r5, r0
  return write(str);
   d5412:	f7ff ffd7 	bl	d53c4 <_ZN5Print5writeEPKc>
   d5416:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5418:	4628      	mov	r0, r5
   d541a:	f7ff ffec 	bl	d53f6 <_ZN5Print7printlnEv>
  return n;
}
   d541e:	4420      	add	r0, r4
   d5420:	bd38      	pop	{r3, r4, r5, pc}

000d5422 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5422:	b530      	push	{r4, r5, lr}
   d5424:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5426:	2300      	movs	r3, #0
   d5428:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d542c:	2a01      	cmp	r2, #1
   d542e:	bf98      	it	ls
   d5430:	220a      	movls	r2, #10
   d5432:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5434:	460d      	mov	r5, r1
   d5436:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d543a:	fb01 5312 	mls	r3, r1, r2, r5
   d543e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5442:	2b09      	cmp	r3, #9
   d5444:	bf94      	ite	ls
   d5446:	3330      	addls	r3, #48	; 0x30
   d5448:	3337      	addhi	r3, #55	; 0x37
   d544a:	b2db      	uxtb	r3, r3
  } while(n);
   d544c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d544e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5452:	d9ef      	bls.n	d5434 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5454:	4621      	mov	r1, r4
   d5456:	f7ff ffb5 	bl	d53c4 <_ZN5Print5writeEPKc>
}
   d545a:	b00b      	add	sp, #44	; 0x2c
   d545c:	bd30      	pop	{r4, r5, pc}
	...

000d5460 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5460:	4b01      	ldr	r3, [pc, #4]	; (d5468 <_GLOBAL__sub_I_RGB+0x8>)
   d5462:	2200      	movs	r2, #0
   d5464:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5466:	4770      	bx	lr
   d5468:	2003e5cc 	.word	0x2003e5cc

000d546c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d546c:	b510      	push	{r4, lr}
   d546e:	4604      	mov	r4, r0
{
	free(buffer);
   d5470:	6800      	ldr	r0, [r0, #0]
   d5472:	f7ff fd63 	bl	d4f3c <free>
}
   d5476:	4620      	mov	r0, r4
   d5478:	bd10      	pop	{r4, pc}

000d547a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d547a:	b510      	push	{r4, lr}
   d547c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d547e:	6800      	ldr	r0, [r0, #0]
   d5480:	b108      	cbz	r0, d5486 <_ZN6String10invalidateEv+0xc>
   d5482:	f7ff fd5b 	bl	d4f3c <free>
	buffer = NULL;
   d5486:	2300      	movs	r3, #0
	capacity = len = 0;
   d5488:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d548c:	6023      	str	r3, [r4, #0]
}
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5490:	b538      	push	{r3, r4, r5, lr}
   d5492:	4604      	mov	r4, r0
   d5494:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5496:	6800      	ldr	r0, [r0, #0]
   d5498:	3101      	adds	r1, #1
   d549a:	f7ff fd57 	bl	d4f4c <realloc>
	if (newbuffer) {
   d549e:	b110      	cbz	r0, d54a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d54a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d54a4:	2001      	movs	r0, #1
	}
	return 0;
}
   d54a6:	bd38      	pop	{r3, r4, r5, pc}

000d54a8 <_ZN6String7reserveEj>:
{
   d54a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d54aa:	6803      	ldr	r3, [r0, #0]
{
   d54ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d54ae:	b123      	cbz	r3, d54ba <_ZN6String7reserveEj+0x12>
   d54b0:	6843      	ldr	r3, [r0, #4]
   d54b2:	428b      	cmp	r3, r1
   d54b4:	d301      	bcc.n	d54ba <_ZN6String7reserveEj+0x12>
   d54b6:	2001      	movs	r0, #1
}
   d54b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff ffe8 	bl	d5490 <_ZN6String12changeBufferEj>
   d54c0:	2800      	cmp	r0, #0
   d54c2:	d0f9      	beq.n	d54b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d54c4:	68a3      	ldr	r3, [r4, #8]
   d54c6:	2b00      	cmp	r3, #0
   d54c8:	d1f5      	bne.n	d54b6 <_ZN6String7reserveEj+0xe>
   d54ca:	6822      	ldr	r2, [r4, #0]
   d54cc:	7013      	strb	r3, [r2, #0]
   d54ce:	e7f2      	b.n	d54b6 <_ZN6String7reserveEj+0xe>

000d54d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d54d4:	4611      	mov	r1, r2
   d54d6:	9201      	str	r2, [sp, #4]
{
   d54d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d54da:	f7ff ffe5 	bl	d54a8 <_ZN6String7reserveEj>
   d54de:	9a01      	ldr	r2, [sp, #4]
   d54e0:	b928      	cbnz	r0, d54ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff ffc9 	bl	d547a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	b003      	add	sp, #12
   d54ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   d54ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d54f0:	4629      	mov	r1, r5
   d54f2:	6820      	ldr	r0, [r4, #0]
   d54f4:	f001 fd34 	bl	d6f60 <memcpy>
	buffer[len] = 0;
   d54f8:	6822      	ldr	r2, [r4, #0]
   d54fa:	68a3      	ldr	r3, [r4, #8]
   d54fc:	2100      	movs	r1, #0
   d54fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5500:	e7f2      	b.n	d54e8 <_ZN6String4copyEPKcj+0x18>

000d5502 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5502:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5504:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5506:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d550a:	4604      	mov	r4, r0
	len = 0;
   d550c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d550e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5510:	b141      	cbz	r1, d5524 <_ZN6StringC1EPKc+0x22>
   d5512:	4608      	mov	r0, r1
   d5514:	9101      	str	r1, [sp, #4]
   d5516:	f001 fd65 	bl	d6fe4 <strlen>
   d551a:	9901      	ldr	r1, [sp, #4]
   d551c:	4602      	mov	r2, r0
   d551e:	4620      	mov	r0, r4
   d5520:	f7ff ffd6 	bl	d54d0 <_ZN6String4copyEPKcj>
}
   d5524:	4620      	mov	r0, r4
   d5526:	b002      	add	sp, #8
   d5528:	bd10      	pop	{r4, pc}

000d552a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d552a:	b513      	push	{r0, r1, r4, lr}
   d552c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d552e:	b159      	cbz	r1, d5548 <_ZN6StringaSEPKc+0x1e>
   d5530:	4608      	mov	r0, r1
   d5532:	9101      	str	r1, [sp, #4]
   d5534:	f001 fd56 	bl	d6fe4 <strlen>
   d5538:	9901      	ldr	r1, [sp, #4]
   d553a:	4602      	mov	r2, r0
   d553c:	4620      	mov	r0, r4
   d553e:	f7ff ffc7 	bl	d54d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5542:	4620      	mov	r0, r4
   d5544:	b002      	add	sp, #8
   d5546:	bd10      	pop	{r4, pc}
	else invalidate();
   d5548:	f7ff ff97 	bl	d547a <_ZN6String10invalidateEv>
   d554c:	e7f9      	b.n	d5542 <_ZN6StringaSEPKc+0x18>

000d554e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d554e:	b570      	push	{r4, r5, r6, lr}
   d5550:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5552:	460e      	mov	r6, r1
   d5554:	b909      	cbnz	r1, d555a <_ZN6String6concatEPKcj+0xc>
   d5556:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5558:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d555a:	b16a      	cbz	r2, d5578 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d555c:	6884      	ldr	r4, [r0, #8]
   d555e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5560:	4621      	mov	r1, r4
   d5562:	f7ff ffa1 	bl	d54a8 <_ZN6String7reserveEj>
   d5566:	2800      	cmp	r0, #0
   d5568:	d0f5      	beq.n	d5556 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d556a:	6828      	ldr	r0, [r5, #0]
   d556c:	68ab      	ldr	r3, [r5, #8]
   d556e:	4631      	mov	r1, r6
   d5570:	4418      	add	r0, r3
   d5572:	f001 fd2f 	bl	d6fd4 <strcpy>
	len = newlen;
   d5576:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5578:	2001      	movs	r0, #1
   d557a:	e7ed      	b.n	d5558 <_ZN6String6concatEPKcj+0xa>

000d557c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d557c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d557e:	2300      	movs	r3, #0
	buf[0] = c;
   d5580:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d5584:	2201      	movs	r2, #1
   d5586:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d5588:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d558c:	f7ff ffdf 	bl	d554e <_ZN6String6concatEPKcj>
}
   d5590:	b003      	add	sp, #12
   d5592:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5598 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5598:	4b05      	ldr	r3, [pc, #20]	; (d55b0 <_GLOBAL__sub_I_System+0x18>)
   d559a:	2202      	movs	r2, #2
   d559c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d559e:	4b05      	ldr	r3, [pc, #20]	; (d55b4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d55a0:	4a05      	ldr	r2, [pc, #20]	; (d55b8 <_GLOBAL__sub_I_System+0x20>)
   d55a2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d55a4:	2000      	movs	r0, #0
   d55a6:	6018      	str	r0, [r3, #0]
   d55a8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d55aa:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d55ac:	f7ff bc22 	b.w	d4df4 <set_system_mode>
   d55b0:	2003e5e8 	.word	0x2003e5e8
   d55b4:	2003e5dc 	.word	0x2003e5dc
   d55b8:	ffff0000 	.word	0xffff0000

000d55bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55bc:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	4b02      	ldr	r3, [pc, #8]	; (d55cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d55c4:	4770      	bx	lr
   d55c6:	bf00      	nop
   d55c8:	2003e47c 	.word	0x2003e47c
   d55cc:	2003e5ec 	.word	0x2003e5ec

000d55d0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d55d0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d55d2:	6804      	ldr	r4, [r0, #0]
   d55d4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d55d6:	46a4      	mov	ip, r4
    }
   d55d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d55dc:	4760      	bx	ip

000d55de <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d55de:	6803      	ldr	r3, [r0, #0]
   d55e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55e2:	4718      	bx	r3

000d55e4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d55e4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d55e6:	4770      	bx	lr

000d55e8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d55e8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d55ea:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d55ec:	1a10      	subs	r0, r2, r0
   d55ee:	4770      	bx	lr

000d55f0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d55f0:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d55f2:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d55f4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d55f8:	68db      	ldr	r3, [r3, #12]
   d55fa:	2201      	movs	r2, #1
   d55fc:	f10d 0107 	add.w	r1, sp, #7
   d5600:	4798      	blx	r3
}
   d5602:	b003      	add	sp, #12
   d5604:	f85d fb04 	ldr.w	pc, [sp], #4

000d5608 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5608:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d560a:	6803      	ldr	r3, [r0, #0]
   d560c:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d560e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5610:	4798      	blx	r3
   d5612:	b128      	cbz	r0, d5620 <_ZN3UDP4readEv+0x18>
   d5614:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5616:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5618:	1c59      	adds	r1, r3, #1
   d561a:	86e1      	strh	r1, [r4, #54]	; 0x36
   d561c:	5cd0      	ldrb	r0, [r2, r3]
}
   d561e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d5620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5624:	e7fb      	b.n	d561e <_ZN3UDP4readEv+0x16>

000d5626 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5626:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5628:	6803      	ldr	r3, [r0, #0]
   d562a:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d562c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d562e:	4798      	blx	r3
   d5630:	b118      	cbz	r0, d563a <_ZN3UDP4peekEv+0x14>
   d5632:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5634:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5636:	5cd0      	ldrb	r0, [r2, r3]
}
   d5638:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d563a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d563e:	e7fb      	b.n	d5638 <_ZN3UDP4peekEv+0x12>

000d5640 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d5640:	4770      	bx	lr

000d5642 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5642:	b410      	push	{r4}
   d5644:	4603      	mov	r3, r0
   d5646:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5648:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d564a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d564c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d564e:	6803      	ldr	r3, [r0, #0]
   d5650:	1a52      	subs	r2, r2, r1
   d5652:	68db      	ldr	r3, [r3, #12]
   d5654:	4421      	add	r1, r4
}
   d5656:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d565a:	4718      	bx	r3

000d565c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d565c:	f1a0 0010 	sub.w	r0, r0, #16
   d5660:	f7ff bfef 	b.w	d5642 <_ZNK3UDP7printToER5Print>

000d5664 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5664:	b570      	push	{r4, r5, r6, lr}
    stop();
   d5666:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5668:	b08c      	sub	sp, #48	; 0x30
    stop();
   d566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d566c:	4604      	mov	r4, r0
   d566e:	460e      	mov	r6, r1
   d5670:	4615      	mov	r5, r2
    stop();
   d5672:	4798      	blx	r3
    const int one = 1;
   d5674:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d5676:	221c      	movs	r2, #28
   d5678:	2100      	movs	r1, #0
   d567a:	a805      	add	r0, sp, #20
    const int one = 1;
   d567c:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d567e:	f001 fc7d 	bl	d6f7c <memset>
    saddr.sin6_len = sizeof(saddr);
   d5682:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d5686:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d5688:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d568c:	f7ff faf2 	bl	d4c74 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5690:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d5692:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5696:	2102      	movs	r1, #2
   d5698:	200a      	movs	r0, #10
   d569a:	f7ff fb2b 	bl	d4cf4 <sock_socket>
    if (_sock < 0) {
   d569e:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d56a0:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d56a2:	db25      	blt.n	d56f0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d56a4:	2204      	movs	r2, #4
   d56a6:	9200      	str	r2, [sp, #0]
   d56a8:	ab02      	add	r3, sp, #8
   d56aa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d56ae:	f7ff fb01 	bl	d4cb4 <sock_setsockopt>
   d56b2:	b9e8      	cbnz	r0, d56f0 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d56b4:	b195      	cbz	r5, d56dc <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d56b6:	9003      	str	r0, [sp, #12]
   d56b8:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d56bc:	a903      	add	r1, sp, #12
   d56be:	b2e8      	uxtb	r0, r5
   d56c0:	f7ff fab8 	bl	d4c34 <if_index_to_name>
   d56c4:	b9a0      	cbnz	r0, d56f0 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d56c6:	2306      	movs	r3, #6
   d56c8:	9300      	str	r3, [sp, #0]
   d56ca:	6960      	ldr	r0, [r4, #20]
   d56cc:	ab03      	add	r3, sp, #12
   d56ce:	f241 020b 	movw	r2, #4107	; 0x100b
   d56d2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d56d6:	f7ff faed 	bl	d4cb4 <sock_setsockopt>
   d56da:	b948      	cbnz	r0, d56f0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d56dc:	6960      	ldr	r0, [r4, #20]
   d56de:	221c      	movs	r2, #28
   d56e0:	a905      	add	r1, sp, #20
   d56e2:	f7ff fadf 	bl	d4ca4 <sock_bind>
   d56e6:	b918      	cbnz	r0, d56f0 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d56e8:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d56ea:	2001      	movs	r0, #1
}
   d56ec:	b00c      	add	sp, #48	; 0x30
   d56ee:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d56f0:	6823      	ldr	r3, [r4, #0]
   d56f2:	4620      	mov	r0, r4
   d56f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56f6:	4798      	blx	r3
   d56f8:	2000      	movs	r0, #0
   d56fa:	e7f7      	b.n	d56ec <_ZN3UDP5beginEtm+0x88>

000d56fc <_ZN3UDP4stopEv>:
void UDP::stop() {
   d56fc:	b510      	push	{r4, lr}
   d56fe:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5700:	6940      	ldr	r0, [r0, #20]
   d5702:	2800      	cmp	r0, #0
   d5704:	db01      	blt.n	d570a <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5706:	f7ff fadd 	bl	d4cc4 <sock_close>
    _sock = -1;
   d570a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d570e:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d5710:	2300      	movs	r3, #0
   d5712:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5714:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d5716:	bd10      	pop	{r4, pc}

000d5718 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5718:	b570      	push	{r4, r5, r6, lr}
   d571a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d571c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d571e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d5720:	b168      	cbz	r0, d573e <_ZN3UDP5writeEPKhj+0x26>
   d5722:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d5724:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d5726:	4294      	cmp	r4, r2
   d5728:	bf28      	it	cs
   d572a:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d572c:	4622      	mov	r2, r4
   d572e:	4430      	add	r0, r6
   d5730:	f001 fc16 	bl	d6f60 <memcpy>
    _offset += size;
   d5734:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5736:	4423      	add	r3, r4
   d5738:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d573a:	4620      	mov	r0, r4
   d573c:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d573e:	4604      	mov	r4, r0
   d5740:	e7f1      	b.n	d5726 <_ZN3UDP5writeEPKhj+0xe>

000d5742 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d5742:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d5744:	6803      	ldr	r3, [r0, #0]
   d5746:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d5748:	4604      	mov	r4, r0
   d574a:	460f      	mov	r7, r1
   d574c:	4616      	mov	r6, r2
    if (available()) {
   d574e:	4798      	blx	r3
   d5750:	b190      	cbz	r0, d5778 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d5752:	6823      	ldr	r3, [r4, #0]
   d5754:	4620      	mov	r0, r4
   d5756:	691b      	ldr	r3, [r3, #16]
   d5758:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d575a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d575c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d575e:	4286      	cmp	r6, r0
   d5760:	bfa8      	it	ge
   d5762:	4606      	movge	r6, r0
   d5764:	4419      	add	r1, r3
   d5766:	4632      	mov	r2, r6
   d5768:	4638      	mov	r0, r7
   d576a:	f001 fbf9 	bl	d6f60 <memcpy>
        _offset += read;
   d576e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5770:	4433      	add	r3, r6
   d5772:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d5774:	4630      	mov	r0, r6
   d5776:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d5778:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d577c:	e7fa      	b.n	d5774 <_ZN3UDP4readEPhj+0x32>
	...

000d5780 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d5780:	b570      	push	{r4, r5, r6, lr}
   d5782:	4604      	mov	r4, r0
   d5784:	4b05      	ldr	r3, [pc, #20]	; (d579c <_ZN3UDP8remoteIPEv+0x1c>)
   d5786:	f844 3b04 	str.w	r3, [r4], #4
   d578a:	f101 0520 	add.w	r5, r1, #32
   d578e:	4606      	mov	r6, r0
   d5790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5794:	682b      	ldr	r3, [r5, #0]
   d5796:	7023      	strb	r3, [r4, #0]
   d5798:	4630      	mov	r0, r6
   d579a:	bd70      	pop	{r4, r5, r6, pc}
   d579c:	000d7158 	.word	0x000d7158

000d57a0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d57a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57a2:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d57a4:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d57a6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d57a8:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d57aa:	4a0a      	ldr	r2, [pc, #40]	; (d57d4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d57ac:	9202      	str	r2, [sp, #8]
   d57ae:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d57b0:	468c      	mov	ip, r1
   d57b2:	4606      	mov	r6, r0
   d57b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d57b6:	ad03      	add	r5, sp, #12
   d57b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d57ba:	6823      	ldr	r3, [r4, #0]
   d57bc:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d57be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d57c2:	9300      	str	r3, [sp, #0]
   d57c4:	4672      	mov	r2, lr
   d57c6:	ab02      	add	r3, sp, #8
   d57c8:	4661      	mov	r1, ip
   d57ca:	4630      	mov	r0, r6
   d57cc:	47b8      	blx	r7
    }
   d57ce:	b009      	add	sp, #36	; 0x24
   d57d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57d2:	bf00      	nop
   d57d4:	000d7158 	.word	0x000d7158

000d57d8 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d57da:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d57dc:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d57de:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d57e0:	4b0c      	ldr	r3, [pc, #48]	; (d5814 <_ZN3UDP9endPacketEv+0x3c>)
   d57e2:	9302      	str	r3, [sp, #8]
   d57e4:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d57e8:	4604      	mov	r4, r0
   d57ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d57ec:	ad03      	add	r5, sp, #12
   d57ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d57f0:	6833      	ldr	r3, [r6, #0]
   d57f2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d57f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d57f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d57f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d57fa:	9300      	str	r3, [sp, #0]
   d57fc:	4620      	mov	r0, r4
   d57fe:	ab02      	add	r3, sp, #8
   d5800:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5802:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5804:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5806:	69db      	ldr	r3, [r3, #28]
   d5808:	4620      	mov	r0, r4
   d580a:	4798      	blx	r3
}
   d580c:	4628      	mov	r0, r5
   d580e:	b009      	add	sp, #36	; 0x24
   d5810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5812:	bf00      	nop
   d5814:	000d7158 	.word	0x000d7158

000d5818 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5818:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d581a:	7843      	ldrb	r3, [r0, #1]
   d581c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d581e:	b08d      	sub	sp, #52	; 0x34
   d5820:	4605      	mov	r5, r0
   d5822:	460c      	mov	r4, r1
   d5824:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5826:	d104      	bne.n	d5832 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5828:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d582a:	4620      	mov	r0, r4
   d582c:	f7ff fcf2 	bl	d5214 <_ZN9IPAddressaSEPKh>
   d5830:	e022      	b.n	d5878 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d5832:	2b0a      	cmp	r3, #10
   d5834:	d125      	bne.n	d5882 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d5836:	2211      	movs	r2, #17
   d5838:	2100      	movs	r1, #0
   d583a:	a801      	add	r0, sp, #4
   d583c:	f001 fb9e 	bl	d6f7c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5840:	68ab      	ldr	r3, [r5, #8]
   d5842:	b303      	cbz	r3, d5886 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5844:	f105 0308 	add.w	r3, r5, #8
   d5848:	ae01      	add	r6, sp, #4
   d584a:	f105 0c18 	add.w	ip, r5, #24
   d584e:	6818      	ldr	r0, [r3, #0]
   d5850:	6859      	ldr	r1, [r3, #4]
   d5852:	4632      	mov	r2, r6
   d5854:	c203      	stmia	r2!, {r0, r1}
   d5856:	3308      	adds	r3, #8
   d5858:	4563      	cmp	r3, ip
   d585a:	4616      	mov	r6, r2
   d585c:	d1f7      	bne.n	d584e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d585e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5860:	a901      	add	r1, sp, #4
   d5862:	a806      	add	r0, sp, #24
   d5864:	ae07      	add	r6, sp, #28
            a.v = 6;
   d5866:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d586a:	f7ff fc91 	bl	d5190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d586e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5870:	3404      	adds	r4, #4
   d5872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5874:	6833      	ldr	r3, [r6, #0]
   d5876:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d5878:	b11f      	cbz	r7, d5882 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d587a:	8868      	ldrh	r0, [r5, #2]
   d587c:	f7ff f9f2 	bl	d4c64 <inet_ntohs>
   d5880:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5882:	b00d      	add	sp, #52	; 0x34
   d5884:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5886:	68eb      	ldr	r3, [r5, #12]
   d5888:	2b00      	cmp	r3, #0
   d588a:	d1db      	bne.n	d5844 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d588c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5890:	692e      	ldr	r6, [r5, #16]
   d5892:	f7ff f9df 	bl	d4c54 <inet_htonl>
   d5896:	4286      	cmp	r6, r0
   d5898:	d1d4      	bne.n	d5844 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d589a:	f105 0114 	add.w	r1, r5, #20
   d589e:	e7c4      	b.n	d582a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d58a0 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d58a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58a4:	4617      	mov	r7, r2
   d58a6:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d58a8:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d58aa:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d58ac:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d58ae:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d58b0:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d58b2:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d58b4:	f7ff f9ee 	bl	d4c94 <netdb_getaddrinfo>
   d58b8:	1e04      	subs	r4, r0, #0
   d58ba:	db20      	blt.n	d58fe <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d58bc:	9b01      	ldr	r3, [sp, #4]
   d58be:	b32b      	cbz	r3, d590c <_ZN3UDP11beginPacketEPKct+0x6c>
   d58c0:	695b      	ldr	r3, [r3, #20]
   d58c2:	b31b      	cbz	r3, d590c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d58c4:	a802      	add	r0, sp, #8
   d58c6:	f7ff fc55 	bl	d5174 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d58ca:	9b01      	ldr	r3, [sp, #4]
   d58cc:	2200      	movs	r2, #0
   d58ce:	6958      	ldr	r0, [r3, #20]
   d58d0:	a902      	add	r1, sp, #8
   d58d2:	f7ff ffa1 	bl	d5818 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d58d6:	a802      	add	r0, sp, #8
   d58d8:	f7ff fc6c 	bl	d51b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d58dc:	b1b0      	cbz	r0, d590c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d58de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d58e0:	ad03      	add	r5, sp, #12
   d58e2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d58e6:	4b0b      	ldr	r3, [pc, #44]	; (d5914 <_ZN3UDP11beginPacketEPKct+0x74>)
   d58e8:	9308      	str	r3, [sp, #32]
   d58ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58ec:	ac09      	add	r4, sp, #36	; 0x24
   d58ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58f0:	682b      	ldr	r3, [r5, #0]
   d58f2:	7023      	strb	r3, [r4, #0]
   d58f4:	463a      	mov	r2, r7
   d58f6:	a908      	add	r1, sp, #32
   d58f8:	4630      	mov	r0, r6
   d58fa:	47c0      	blx	r8
   d58fc:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d58fe:	9801      	ldr	r0, [sp, #4]
   d5900:	f7ff f9c0 	bl	d4c84 <netdb_freeaddrinfo>
}
   d5904:	4620      	mov	r0, r4
   d5906:	b00e      	add	sp, #56	; 0x38
   d5908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d590c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5910:	e7f5      	b.n	d58fe <_ZN3UDP11beginPacketEPKct+0x5e>
   d5912:	bf00      	nop
   d5914:	000d7158 	.word	0x000d7158

000d5918 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d591c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d5920:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5924:	b090      	sub	sp, #64	; 0x40
   d5926:	4605      	mov	r5, r0
   d5928:	460e      	mov	r6, r1
   d592a:	4690      	mov	r8, r2
   d592c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d592e:	db3c      	blt.n	d59aa <_ZN3UDP13receivePacketEPhjm+0x92>
   d5930:	2900      	cmp	r1, #0
   d5932:	d03a      	beq.n	d59aa <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d5934:	f04f 0a1c 	mov.w	sl, #28
   d5938:	af09      	add	r7, sp, #36	; 0x24
   d593a:	4652      	mov	r2, sl
   d593c:	2100      	movs	r1, #0
   d593e:	4638      	mov	r0, r7
   d5940:	f001 fb1c 	bl	d6f7c <memset>
        socklen_t slen = sizeof(saddr);
   d5944:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d5948:	b1dc      	cbz	r4, d5982 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d594a:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d594c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5950:	fbb4 f3f0 	udiv	r3, r4, r0
   d5954:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5958:	fb00 4313 	mls	r3, r0, r3, r4
   d595c:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d595e:	2310      	movs	r3, #16
            struct timeval tv = {};
   d5960:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5962:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5964:	9300      	str	r3, [sp, #0]
   d5966:	f241 0206 	movw	r2, #4102	; 0x1006
   d596a:	446b      	add	r3, sp
   d596c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5970:	4648      	mov	r0, r9
   d5972:	f7ff f99f 	bl	d4cb4 <sock_setsockopt>
            if (ret) {
   d5976:	4604      	mov	r4, r0
   d5978:	b120      	cbz	r0, d5984 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d597a:	4620      	mov	r0, r4
   d597c:	b010      	add	sp, #64	; 0x40
   d597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d5982:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5984:	ab03      	add	r3, sp, #12
   d5986:	e9cd 7300 	strd	r7, r3, [sp]
   d598a:	6968      	ldr	r0, [r5, #20]
   d598c:	4623      	mov	r3, r4
   d598e:	4642      	mov	r2, r8
   d5990:	4631      	mov	r1, r6
   d5992:	f7ff f99f 	bl	d4cd4 <sock_recvfrom>
        if (ret >= 0) {
   d5996:	1e04      	subs	r4, r0, #0
   d5998:	dbef      	blt.n	d597a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d599a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d599e:	f105 011c 	add.w	r1, r5, #28
   d59a2:	4638      	mov	r0, r7
   d59a4:	f7ff ff38 	bl	d5818 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d59a8:	e7e7      	b.n	d597a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d59aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d59ae:	e7e4      	b.n	d597a <_ZN3UDP13receivePacketEPhjm+0x62>

000d59b0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d59b0:	b538      	push	{r3, r4, r5, lr}
   d59b2:	4605      	mov	r5, r0
   d59b4:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d59b6:	7d2b      	ldrb	r3, [r5, #20]
   d59b8:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d59ba:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d59bc:	d110      	bne.n	d59e0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d59be:	f640 231c 	movw	r3, #2588	; 0xa1c
   d59c2:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d59c4:	f7ff f956 	bl	d4c74 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d59c8:	3408      	adds	r4, #8
   d59ca:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d59cc:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d59d0:	3514      	adds	r5, #20
   d59d2:	f853 2b04 	ldr.w	r2, [r3], #4
   d59d6:	f844 2b04 	str.w	r2, [r4], #4
   d59da:	42ab      	cmp	r3, r5
   d59dc:	d1f9      	bne.n	d59d2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d59de:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d59e0:	2b04      	cmp	r3, #4
   d59e2:	d1fc      	bne.n	d59de <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d59e4:	f44f 7304 	mov.w	r3, #528	; 0x210
   d59e8:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d59ea:	f7ff f943 	bl	d4c74 <inet_htons>
   d59ee:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d59f0:	6868      	ldr	r0, [r5, #4]
   d59f2:	f7ff f92f 	bl	d4c54 <inet_htonl>
   d59f6:	6060      	str	r0, [r4, #4]
}
   d59f8:	e7f1      	b.n	d59de <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d59fa <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d59fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59fe:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d5a00:	af03      	add	r7, sp, #12
   d5a02:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5a06:	4698      	mov	r8, r3
   d5a08:	4604      	mov	r4, r0
   d5a0a:	460d      	mov	r5, r1
   d5a0c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d5a0e:	2100      	movs	r1, #0
   d5a10:	464a      	mov	r2, r9
   d5a12:	4638      	mov	r0, r7
   d5a14:	f001 fab2 	bl	d6f7c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5a18:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5a1c:	463a      	mov	r2, r7
   d5a1e:	4640      	mov	r0, r8
   d5a20:	f7ff ffc6 	bl	d59b0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5a24:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5a28:	b153      	cbz	r3, d5a40 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5a2a:	e9cd 7900 	strd	r7, r9, [sp]
   d5a2e:	6960      	ldr	r0, [r4, #20]
   d5a30:	2300      	movs	r3, #0
   d5a32:	4632      	mov	r2, r6
   d5a34:	4629      	mov	r1, r5
   d5a36:	f7ff f955 	bl	d4ce4 <sock_sendto>
}
   d5a3a:	b00b      	add	sp, #44	; 0x2c
   d5a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d5a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5a44:	e7f9      	b.n	d5a3a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d5a48 <_ZN3UDPC1Ev>:
UDP::UDP()
   d5a48:	b538      	push	{r3, r4, r5, lr}
   d5a4a:	2500      	movs	r5, #0
   d5a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a50:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d5a54:	4b0b      	ldr	r3, [pc, #44]	; (d5a84 <_ZN3UDPC1Ev+0x3c>)
   d5a56:	f103 0208 	add.w	r2, r3, #8
   d5a5a:	336c      	adds	r3, #108	; 0x6c
   d5a5c:	6103      	str	r3, [r0, #16]
   d5a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d5a62:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d5a64:	6002      	str	r2, [r0, #0]
   d5a66:	6143      	str	r3, [r0, #20]
   d5a68:	301c      	adds	r0, #28
   d5a6a:	f7ff fb83 	bl	d5174 <_ZN9IPAddressC1Ev>
   d5a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5a72:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d5a76:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5a78:	8725      	strh	r5, [r4, #56]	; 0x38
   d5a7a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5a7c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d5a80:	4620      	mov	r0, r4
   d5a82:	bd38      	pop	{r3, r4, r5, pc}
   d5a84:	000d71c0 	.word	0x000d71c0

000d5a88 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d5a88:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5a8a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d5a8e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5a90:	b123      	cbz	r3, d5a9c <_ZN3UDP13releaseBufferEv+0x14>
   d5a92:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5a94:	b110      	cbz	r0, d5a9c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d5a96:	2101      	movs	r1, #1
   d5a98:	f000 fa92 	bl	d5fc0 <_ZdlPvj>
    _buffer = NULL;
   d5a9c:	2300      	movs	r3, #0
   d5a9e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5aa0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5aa4:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d5aa6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5aa8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5aac:	b570      	push	{r4, r5, r6, lr}
   d5aae:	4604      	mov	r4, r0
   d5ab0:	4616      	mov	r6, r2
   d5ab2:	460d      	mov	r5, r1
    releaseBuffer();
   d5ab4:	f7ff ffe8 	bl	d5a88 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d5ab8:	2300      	movs	r3, #0
    _buffer = buffer;
   d5aba:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5abc:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5abe:	b12e      	cbz	r6, d5acc <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d5ac0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d5ac2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5ac4:	3800      	subs	r0, #0
   d5ac6:	bf18      	it	ne
   d5ac8:	2001      	movne	r0, #1
   d5aca:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d5acc:	2d00      	cmp	r5, #0
   d5ace:	d0f8      	beq.n	d5ac2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d5ad0:	4628      	mov	r0, r5
   d5ad2:	f7fe fae0 	bl	d4096 <_Znaj>
        _buffer_allocated = true;
   d5ad6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d5ad8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5ada:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d5ade:	2800      	cmp	r0, #0
   d5ae0:	d0ef      	beq.n	d5ac2 <_ZN3UDP9setBufferEjPh+0x16>
   d5ae2:	e7ed      	b.n	d5ac0 <_ZN3UDP9setBufferEjPh+0x14>

000d5ae4 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ae6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d5ae8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5aea:	4605      	mov	r5, r0
   d5aec:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d5aee:	b91a      	cbnz	r2, d5af8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5af0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5af2:	b109      	cbz	r1, d5af8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5af4:	f7ff ffda 	bl	d5aac <_ZN3UDP9setBufferEjPh>
   d5af8:	3404      	adds	r4, #4
   d5afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5afc:	f105 0620 	add.w	r6, r5, #32
   d5b00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5b02:	6823      	ldr	r3, [r4, #0]
   d5b04:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d5b06:	2300      	movs	r3, #0
}
   d5b08:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d5b0a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d5b0c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5b0e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d5b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b12 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d5b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d5b14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d5b16:	4604      	mov	r4, r0
   d5b18:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d5b1a:	b92a      	cbnz	r2, d5b28 <_ZN3UDP11parsePacketEm+0x16>
   d5b1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5b1e:	b119      	cbz	r1, d5b28 <_ZN3UDP11parsePacketEm+0x16>
   d5b20:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d5b22:	f7ff ffc3 	bl	d5aac <_ZN3UDP9setBufferEjPh>
   d5b26:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d5b28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d5b2a:	2200      	movs	r2, #0
   d5b2c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5b2e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d5b30:	b141      	cbz	r1, d5b44 <_ZN3UDP11parsePacketEm+0x32>
   d5b32:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5b34:	b132      	cbz	r2, d5b44 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5b36:	6820      	ldr	r0, [r4, #0]
   d5b38:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	47a8      	blx	r5
        if (result > 0) {
   d5b3e:	2800      	cmp	r0, #0
            _total = result;
   d5b40:	bfc8      	it	gt
   d5b42:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d5b44:	6823      	ldr	r3, [r4, #0]
   d5b46:	691b      	ldr	r3, [r3, #16]
   d5b48:	4620      	mov	r0, r4
}
   d5b4a:	b003      	add	sp, #12
   d5b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d5b50:	4718      	bx	r3
	...

000d5b54 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5b54:	b510      	push	{r4, lr}
   d5b56:	4b07      	ldr	r3, [pc, #28]	; (d5b74 <_ZN3UDPD1Ev+0x20>)
   d5b58:	f103 0208 	add.w	r2, r3, #8
   d5b5c:	336c      	adds	r3, #108	; 0x6c
   d5b5e:	4604      	mov	r4, r0
   d5b60:	6002      	str	r2, [r0, #0]
   d5b62:	6103      	str	r3, [r0, #16]
   d5b64:	f7ff fdca 	bl	d56fc <_ZN3UDP4stopEv>
   d5b68:	4620      	mov	r0, r4
   d5b6a:	f7ff ff8d 	bl	d5a88 <_ZN3UDP13releaseBufferEv>
   d5b6e:	4620      	mov	r0, r4
   d5b70:	bd10      	pop	{r4, pc}
   d5b72:	bf00      	nop
   d5b74:	000d71c0 	.word	0x000d71c0

000d5b78 <_ZN3UDPD0Ev>:
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	4604      	mov	r4, r0
   d5b7c:	f7ff ffea 	bl	d5b54 <_ZN3UDPD1Ev>
   d5b80:	4620      	mov	r0, r4
   d5b82:	214c      	movs	r1, #76	; 0x4c
   d5b84:	f000 fa1c 	bl	d5fc0 <_ZdlPvj>
   d5b88:	4620      	mov	r0, r4
   d5b8a:	bd10      	pop	{r4, pc}

000d5b8c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b8c:	4770      	bx	lr

000d5b8e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b8e:	7441      	strb	r1, [r0, #17]
}
   d5b90:	4770      	bx	lr

000d5b92 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b92:	4770      	bx	lr

000d5b94 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5b94:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b96:	7c00      	ldrb	r0, [r0, #16]
   d5b98:	f7ff f8e4 	bl	d4d64 <hal_usart_available_data_for_write>
}
   d5b9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ba0:	bd08      	pop	{r3, pc}

000d5ba2 <_ZN11USARTSerial9availableEv>:
{
   d5ba2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5ba4:	7c00      	ldrb	r0, [r0, #16]
   d5ba6:	f7ff f8bd 	bl	d4d24 <hal_usart_available>
}
   d5baa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bae:	bd08      	pop	{r3, pc}

000d5bb0 <_ZN11USARTSerial4peekEv>:
{
   d5bb0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5bb2:	7c00      	ldrb	r0, [r0, #16]
   d5bb4:	f7ff f8c6 	bl	d4d44 <hal_usart_peek>
}
   d5bb8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5bbc:	bd08      	pop	{r3, pc}

000d5bbe <_ZN11USARTSerial4readEv>:
{
   d5bbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5bc0:	7c00      	ldrb	r0, [r0, #16]
   d5bc2:	f7ff f8b7 	bl	d4d34 <hal_usart_read>
}
   d5bc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5bca:	bd08      	pop	{r3, pc}

000d5bcc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5bcc:	7c00      	ldrb	r0, [r0, #16]
   d5bce:	f7ff b8c1 	b.w	d4d54 <hal_usart_flush>

000d5bd2 <_ZN11USARTSerial5writeEh>:
{
   d5bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bd4:	7c45      	ldrb	r5, [r0, #17]
{
   d5bd6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bd8:	b12d      	cbz	r5, d5be6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5bda:	7c20      	ldrb	r0, [r4, #16]
}
   d5bdc:	b003      	add	sp, #12
   d5bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5be2:	f7ff b897 	b.w	d4d14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5be6:	7c00      	ldrb	r0, [r0, #16]
   d5be8:	9101      	str	r1, [sp, #4]
   d5bea:	f7ff f8bb 	bl	d4d64 <hal_usart_available_data_for_write>
   d5bee:	2800      	cmp	r0, #0
   d5bf0:	9901      	ldr	r1, [sp, #4]
   d5bf2:	dcf2      	bgt.n	d5bda <_ZN11USARTSerial5writeEh+0x8>
}
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	b003      	add	sp, #12
   d5bf8:	bd30      	pop	{r4, r5, pc}

000d5bfa <_ZN11USARTSerialD0Ev>:
   d5bfa:	b510      	push	{r4, lr}
   d5bfc:	2114      	movs	r1, #20
   d5bfe:	4604      	mov	r4, r0
   d5c00:	f000 f9de 	bl	d5fc0 <_ZdlPvj>
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd10      	pop	{r4, pc}

000d5c08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	f04f 0c00 	mov.w	ip, #0
   d5c0e:	4604      	mov	r4, r0
   d5c10:	4608      	mov	r0, r1
   d5c12:	4611      	mov	r1, r2
   d5c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c18:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5c1c:	4a04      	ldr	r2, [pc, #16]	; (d5c30 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5c1e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5c20:	2201      	movs	r2, #1
  _serial = serial;
   d5c22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5c24:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5c26:	461a      	mov	r2, r3
   d5c28:	f7ff f86c 	bl	d4d04 <hal_usart_init>
}
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	bd10      	pop	{r4, pc}
   d5c30:	000d7238 	.word	0x000d7238

000d5c34 <_Z22__fetch_global_Serial1v>:
{
   d5c34:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c36:	4c0d      	ldr	r4, [pc, #52]	; (d5c6c <_Z22__fetch_global_Serial1v+0x38>)
   d5c38:	7821      	ldrb	r1, [r4, #0]
   d5c3a:	f3bf 8f5b 	dmb	ish
   d5c3e:	f011 0101 	ands.w	r1, r1, #1
   d5c42:	d110      	bne.n	d5c66 <_Z22__fetch_global_Serial1v+0x32>
   d5c44:	4620      	mov	r0, r4
   d5c46:	9101      	str	r1, [sp, #4]
   d5c48:	f7fe fa29 	bl	d409e <__cxa_guard_acquire>
   d5c4c:	9901      	ldr	r1, [sp, #4]
   d5c4e:	b150      	cbz	r0, d5c66 <_Z22__fetch_global_Serial1v+0x32>
   d5c50:	4b07      	ldr	r3, [pc, #28]	; (d5c70 <_Z22__fetch_global_Serial1v+0x3c>)
   d5c52:	4a08      	ldr	r2, [pc, #32]	; (d5c74 <_Z22__fetch_global_Serial1v+0x40>)
   d5c54:	4808      	ldr	r0, [pc, #32]	; (d5c78 <_Z22__fetch_global_Serial1v+0x44>)
   d5c56:	f7ff ffd7 	bl	d5c08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	f7fe fa24 	bl	d40a8 <__cxa_guard_release>
   d5c60:	4806      	ldr	r0, [pc, #24]	; (d5c7c <_Z22__fetch_global_Serial1v+0x48>)
   d5c62:	f001 f977 	bl	d6f54 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c66:	4804      	ldr	r0, [pc, #16]	; (d5c78 <_Z22__fetch_global_Serial1v+0x44>)
   d5c68:	b002      	add	sp, #8
   d5c6a:	bd10      	pop	{r4, pc}
   d5c6c:	2003e5f0 	.word	0x2003e5f0
   d5c70:	2003e678 	.word	0x2003e678
   d5c74:	2003e5f4 	.word	0x2003e5f4
   d5c78:	2003e6fc 	.word	0x2003e6fc
   d5c7c:	000d5b93 	.word	0x000d5b93

000d5c80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c80:	7441      	strb	r1, [r0, #17]
}
   d5c82:	4770      	bx	lr

000d5c84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c84:	4770      	bx	lr

000d5c86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c86:	4770      	bx	lr

000d5c88 <_ZN9USBSerial4readEv>:
{
   d5c88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c8a:	2100      	movs	r1, #0
   d5c8c:	7c00      	ldrb	r0, [r0, #16]
   d5c8e:	f7ff f891 	bl	d4db4 <HAL_USB_USART_Receive_Data>
}
   d5c92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c96:	bd08      	pop	{r3, pc}

000d5c98 <_ZN9USBSerial4peekEv>:
{
   d5c98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c9a:	2101      	movs	r1, #1
   d5c9c:	7c00      	ldrb	r0, [r0, #16]
   d5c9e:	f7ff f889 	bl	d4db4 <HAL_USB_USART_Receive_Data>
}
   d5ca2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5ca6:	bd08      	pop	{r3, pc}

000d5ca8 <_ZN9USBSerial17availableForWriteEv>:
{
   d5ca8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5caa:	7c00      	ldrb	r0, [r0, #16]
   d5cac:	f7ff f87a 	bl	d4da4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5cb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cb4:	bd08      	pop	{r3, pc}

000d5cb6 <_ZN9USBSerial9availableEv>:
{
   d5cb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cb8:	7c00      	ldrb	r0, [r0, #16]
   d5cba:	f7ff f86b 	bl	d4d94 <HAL_USB_USART_Available_Data>
}
   d5cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cc2:	bd08      	pop	{r3, pc}

000d5cc4 <_ZN9USBSerial5writeEh>:
{
   d5cc4:	b513      	push	{r0, r1, r4, lr}
   d5cc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5cc8:	7c00      	ldrb	r0, [r0, #16]
{
   d5cca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ccc:	f7ff f86a 	bl	d4da4 <HAL_USB_USART_Available_Data_For_Write>
   d5cd0:	2800      	cmp	r0, #0
   d5cd2:	9901      	ldr	r1, [sp, #4]
   d5cd4:	dc01      	bgt.n	d5cda <_ZN9USBSerial5writeEh+0x16>
   d5cd6:	7c60      	ldrb	r0, [r4, #17]
   d5cd8:	b120      	cbz	r0, d5ce4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5cda:	7c20      	ldrb	r0, [r4, #16]
   d5cdc:	f7ff f872 	bl	d4dc4 <HAL_USB_USART_Send_Data>
   d5ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5ce4:	b002      	add	sp, #8
   d5ce6:	bd10      	pop	{r4, pc}

000d5ce8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ce8:	7c00      	ldrb	r0, [r0, #16]
   d5cea:	f7ff b873 	b.w	d4dd4 <HAL_USB_USART_Flush_Data>

000d5cee <_ZN9USBSerialD0Ev>:
   d5cee:	b510      	push	{r4, lr}
   d5cf0:	2114      	movs	r1, #20
   d5cf2:	4604      	mov	r4, r0
   d5cf4:	f000 f964 	bl	d5fc0 <_ZdlPvj>
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	bd10      	pop	{r4, pc}

000d5cfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d02:	4604      	mov	r4, r0
   d5d04:	4608      	mov	r0, r1
   d5d06:	2100      	movs	r1, #0
   d5d08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5d0c:	4b04      	ldr	r3, [pc, #16]	; (d5d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5d10:	2301      	movs	r3, #1
  _serial = serial;
   d5d12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5d14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5d16:	4611      	mov	r1, r2
   d5d18:	f7ff f82c 	bl	d4d74 <HAL_USB_USART_Init>
}
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	bd10      	pop	{r4, pc}
   d5d20:	000d7268 	.word	0x000d7268

000d5d24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d24:	7c00      	ldrb	r0, [r0, #16]
   d5d26:	2200      	movs	r2, #0
   d5d28:	f7ff b82c 	b.w	d4d84 <HAL_USB_USART_Begin>

000d5d2c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   d5d2c:	7c00      	ldrb	r0, [r0, #16]
   d5d2e:	f7ff b859 	b.w	d4de4 <HAL_USB_USART_Is_Connected>

000d5d32 <_Z19acquireSerialBufferv>:
{
   d5d32:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d34:	2214      	movs	r2, #20
{
   d5d36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d38:	2100      	movs	r1, #0
   d5d3a:	f001 f91f 	bl	d6f7c <memset>
}
   d5d3e:	4620      	mov	r0, r4
   d5d40:	bd10      	pop	{r4, pc}
	...

000d5d44 <_Z16_fetch_usbserialv>:
{
   d5d44:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d46:	4c0f      	ldr	r4, [pc, #60]	; (d5d84 <_Z16_fetch_usbserialv+0x40>)
{
   d5d48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d4a:	a803      	add	r0, sp, #12
   d5d4c:	f7ff fff1 	bl	d5d32 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d50:	7821      	ldrb	r1, [r4, #0]
   d5d52:	f3bf 8f5b 	dmb	ish
   d5d56:	f011 0101 	ands.w	r1, r1, #1
   d5d5a:	d10f      	bne.n	d5d7c <_Z16_fetch_usbserialv+0x38>
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	9101      	str	r1, [sp, #4]
   d5d60:	f7fe f99d 	bl	d409e <__cxa_guard_acquire>
   d5d64:	9901      	ldr	r1, [sp, #4]
   d5d66:	b148      	cbz	r0, d5d7c <_Z16_fetch_usbserialv+0x38>
   d5d68:	aa03      	add	r2, sp, #12
   d5d6a:	4807      	ldr	r0, [pc, #28]	; (d5d88 <_Z16_fetch_usbserialv+0x44>)
   d5d6c:	f7ff ffc6 	bl	d5cfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d70:	4620      	mov	r0, r4
   d5d72:	f7fe f999 	bl	d40a8 <__cxa_guard_release>
   d5d76:	4805      	ldr	r0, [pc, #20]	; (d5d8c <_Z16_fetch_usbserialv+0x48>)
   d5d78:	f001 f8ec 	bl	d6f54 <atexit>
	return _usbserial;
}
   d5d7c:	4802      	ldr	r0, [pc, #8]	; (d5d88 <_Z16_fetch_usbserialv+0x44>)
   d5d7e:	b008      	add	sp, #32
   d5d80:	bd10      	pop	{r4, pc}
   d5d82:	bf00      	nop
   d5d84:	2003e710 	.word	0x2003e710
   d5d88:	2003e714 	.word	0x2003e714
   d5d8c:	000d5c85 	.word	0x000d5c85

000d5d90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d90:	2200      	movs	r2, #0
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	4611      	mov	r1, r2
   d5d96:	f7ff b881 	b.w	d4e9c <network_ready>

000d5d9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d9a:	2200      	movs	r2, #0
   d5d9c:	6840      	ldr	r0, [r0, #4]
   d5d9e:	4611      	mov	r1, r2
   d5da0:	f7ff b89c 	b.w	d4edc <network_listening>

000d5da4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5da4:	2200      	movs	r2, #0
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	4611      	mov	r1, r2
   d5daa:	f7ff b8a7 	b.w	d4efc <network_get_listen_timeout>

000d5dae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5dae:	6840      	ldr	r0, [r0, #4]
   d5db0:	2200      	movs	r2, #0
   d5db2:	f7ff b89b 	b.w	d4eec <network_set_listen_timeout>

000d5db6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5db6:	6840      	ldr	r0, [r0, #4]
   d5db8:	2200      	movs	r2, #0
   d5dba:	f081 0101 	eor.w	r1, r1, #1
   d5dbe:	f7ff b885 	b.w	d4ecc <network_listen>

000d5dc2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	6840      	ldr	r0, [r0, #4]
   d5dc6:	461a      	mov	r2, r3
   d5dc8:	4619      	mov	r1, r3
   d5dca:	f7ff b877 	b.w	d4ebc <network_off>

000d5dce <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5dce:	2300      	movs	r3, #0
   d5dd0:	6840      	ldr	r0, [r0, #4]
   d5dd2:	461a      	mov	r2, r3
   d5dd4:	4619      	mov	r1, r3
   d5dd6:	f7ff b869 	b.w	d4eac <network_on>

000d5dda <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5dda:	2200      	movs	r2, #0
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	4611      	mov	r1, r2
   d5de0:	f7ff b84c 	b.w	d4e7c <network_connecting>

000d5de4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5de4:	6840      	ldr	r0, [r0, #4]
   d5de6:	2200      	movs	r2, #0
   d5de8:	2102      	movs	r1, #2
   d5dea:	f7ff b84f 	b.w	d4e8c <network_disconnect>

000d5dee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5dee:	2300      	movs	r3, #0
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	461a      	mov	r2, r3
   d5df4:	f7ff b83a 	b.w	d4e6c <network_connect>

000d5df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5df8:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5dfa:	2204      	movs	r2, #4
   d5dfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5dfe:	4a02      	ldr	r2, [pc, #8]	; (d5e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e00:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5e02:	4770      	bx	lr
   d5e04:	2003e728 	.word	0x2003e728
   d5e08:	000d7298 	.word	0x000d7298

000d5e0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e0c:	4b01      	ldr	r3, [pc, #4]	; (d5e14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e10:	4770      	bx	lr
   d5e12:	bf00      	nop
   d5e14:	2003e484 	.word	0x2003e484

000d5e18 <serialEventRun>:
{
   d5e18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e1a:	4b0b      	ldr	r3, [pc, #44]	; (d5e48 <serialEventRun+0x30>)
   d5e1c:	b143      	cbz	r3, d5e30 <serialEventRun+0x18>
   d5e1e:	f7ff ff91 	bl	d5d44 <_Z16_fetch_usbserialv>
   d5e22:	6803      	ldr	r3, [r0, #0]
   d5e24:	691b      	ldr	r3, [r3, #16]
   d5e26:	4798      	blx	r3
   d5e28:	2800      	cmp	r0, #0
   d5e2a:	dd01      	ble.n	d5e30 <serialEventRun+0x18>
        serialEvent();
   d5e2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5e30:	4b06      	ldr	r3, [pc, #24]	; (d5e4c <serialEventRun+0x34>)
   d5e32:	b143      	cbz	r3, d5e46 <serialEventRun+0x2e>
   d5e34:	f7ff fefe 	bl	d5c34 <_Z22__fetch_global_Serial1v>
   d5e38:	6803      	ldr	r3, [r0, #0]
   d5e3a:	691b      	ldr	r3, [r3, #16]
   d5e3c:	4798      	blx	r3
   d5e3e:	2800      	cmp	r0, #0
   d5e40:	dd01      	ble.n	d5e46 <serialEventRun+0x2e>
        serialEvent1();
   d5e42:	f3af 8000 	nop.w
}
   d5e46:	bd08      	pop	{r3, pc}
	...

000d5e50 <_post_loop>:
{
   d5e50:	b508      	push	{r3, lr}
	serialEventRun();
   d5e52:	f7ff ffe1 	bl	d5e18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e56:	f7fe fe8d 	bl	d4b74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e5a:	4b01      	ldr	r3, [pc, #4]	; (d5e60 <_post_loop+0x10>)
   d5e5c:	6018      	str	r0, [r3, #0]
}
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	2003e738 	.word	0x2003e738

000d5e64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e64:	4805      	ldr	r0, [pc, #20]	; (d5e7c <_Z33system_initialize_user_backup_ramv+0x18>)
   d5e66:	4a06      	ldr	r2, [pc, #24]	; (d5e80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5e68:	4906      	ldr	r1, [pc, #24]	; (d5e84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5e6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e6c:	1a12      	subs	r2, r2, r0
   d5e6e:	f001 f877 	bl	d6f60 <memcpy>
    __backup_sram_signature = signature;
   d5e72:	4b05      	ldr	r3, [pc, #20]	; (d5e88 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5e74:	4a05      	ldr	r2, [pc, #20]	; (d5e8c <_Z33system_initialize_user_backup_ramv+0x28>)
   d5e76:	601a      	str	r2, [r3, #0]
}
   d5e78:	bd08      	pop	{r3, pc}
   d5e7a:	bf00      	nop
   d5e7c:	2003f400 	.word	0x2003f400
   d5e80:	2003f404 	.word	0x2003f404
   d5e84:	000d7340 	.word	0x000d7340
   d5e88:	2003f400 	.word	0x2003f400
   d5e8c:	9a271c1e 	.word	0x9a271c1e

000d5e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e92:	2300      	movs	r3, #0
   d5e94:	9300      	str	r3, [sp, #0]
   d5e96:	461a      	mov	r2, r3
   d5e98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e9c:	f7fe ffcc 	bl	d4e38 <system_ctrl_set_result>
}
   d5ea0:	b003      	add	sp, #12
   d5ea2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ea8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5ea8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5eaa:	8843      	ldrh	r3, [r0, #2]
   d5eac:	2b0a      	cmp	r3, #10
   d5eae:	d008      	beq.n	d5ec2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5eb0:	2b50      	cmp	r3, #80	; 0x50
   d5eb2:	d10b      	bne.n	d5ecc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5eb4:	4b09      	ldr	r3, [pc, #36]	; (d5edc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5eb6:	681b      	ldr	r3, [r3, #0]
   d5eb8:	b14b      	cbz	r3, d5ece <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5eba:	b003      	add	sp, #12
   d5ebc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5ec0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5ec2:	f7ff ffe5 	bl	d5e90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5ec6:	b003      	add	sp, #12
   d5ec8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ecc:	2300      	movs	r3, #0
   d5ece:	9300      	str	r3, [sp, #0]
   d5ed0:	461a      	mov	r2, r3
   d5ed2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ed6:	f7fe ffaf 	bl	d4e38 <system_ctrl_set_result>
}
   d5eda:	e7f4      	b.n	d5ec6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5edc:	2003e734 	.word	0x2003e734

000d5ee0 <module_user_init_hook>:
{
   d5ee0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ee2:	4812      	ldr	r0, [pc, #72]	; (d5f2c <module_user_init_hook+0x4c>)
   d5ee4:	2100      	movs	r1, #0
   d5ee6:	f7ff f841 	bl	d4f6c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5eea:	4b11      	ldr	r3, [pc, #68]	; (d5f30 <module_user_init_hook+0x50>)
   d5eec:	681a      	ldr	r2, [r3, #0]
   d5eee:	4b11      	ldr	r3, [pc, #68]	; (d5f34 <module_user_init_hook+0x54>)
   d5ef0:	429a      	cmp	r2, r3
   d5ef2:	4b11      	ldr	r3, [pc, #68]	; (d5f38 <module_user_init_hook+0x58>)
   d5ef4:	bf0c      	ite	eq
   d5ef6:	2201      	moveq	r2, #1
   d5ef8:	2200      	movne	r2, #0
   d5efa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5efc:	d001      	beq.n	d5f02 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5efe:	f7ff ffb1 	bl	d5e64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f02:	f7fe fe2f 	bl	d4b64 <HAL_RNG_GetRandomNumber>
   d5f06:	4604      	mov	r4, r0
    srand(seed);
   d5f08:	f001 f840 	bl	d6f8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f0c:	4b0b      	ldr	r3, [pc, #44]	; (d5f3c <module_user_init_hook+0x5c>)
   d5f0e:	b113      	cbz	r3, d5f16 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5f10:	4620      	mov	r0, r4
   d5f12:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f16:	2100      	movs	r1, #0
   d5f18:	4808      	ldr	r0, [pc, #32]	; (d5f3c <module_user_init_hook+0x5c>)
   d5f1a:	f7fe ff9f 	bl	d4e5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f22:	4807      	ldr	r0, [pc, #28]	; (d5f40 <module_user_init_hook+0x60>)
   d5f24:	2100      	movs	r1, #0
   d5f26:	f7fe bf7d 	b.w	d4e24 <system_ctrl_set_app_request_handler>
   d5f2a:	bf00      	nop
   d5f2c:	000d5e0d 	.word	0x000d5e0d
   d5f30:	2003f400 	.word	0x2003f400
   d5f34:	9a271c1e 	.word	0x9a271c1e
   d5f38:	2003e730 	.word	0x2003e730
   d5f3c:	00000000 	.word	0x00000000
   d5f40:	000d5ea9 	.word	0x000d5ea9

000d5f44 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f44:	4770      	bx	lr
	...

000d5f48 <_Z17acquireWireBufferv>:
{
   d5f48:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5f4a:	2300      	movs	r3, #0
   d5f4c:	2520      	movs	r5, #32
   d5f4e:	8043      	strh	r3, [r0, #2]
   d5f50:	2314      	movs	r3, #20
{
   d5f52:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5f54:	8003      	strh	r3, [r0, #0]
   d5f56:	6085      	str	r5, [r0, #8]
   d5f58:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5f5a:	4906      	ldr	r1, [pc, #24]	; (d5f74 <_Z17acquireWireBufferv+0x2c>)
   d5f5c:	4628      	mov	r0, r5
   d5f5e:	f000 f831 	bl	d5fc4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5f62:	4904      	ldr	r1, [pc, #16]	; (d5f74 <_Z17acquireWireBufferv+0x2c>)
	};
   d5f64:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5f66:	4628      	mov	r0, r5
   d5f68:	f000 f82c 	bl	d5fc4 <_ZnajRKSt9nothrow_t>
	};
   d5f6c:	60e0      	str	r0, [r4, #12]
}
   d5f6e:	4620      	mov	r0, r4
   d5f70:	bd38      	pop	{r3, r4, r5, pc}
   d5f72:	bf00      	nop
   d5f74:	000d72cc 	.word	0x000d72cc

000d5f78 <_Z19__fetch_global_Wirev>:
{
   d5f78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f7a:	4d0e      	ldr	r5, [pc, #56]	; (d5fb4 <_Z19__fetch_global_Wirev+0x3c>)
   d5f7c:	7829      	ldrb	r1, [r5, #0]
   d5f7e:	f3bf 8f5b 	dmb	ish
   d5f82:	f011 0401 	ands.w	r4, r1, #1
{
   d5f86:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f88:	d111      	bne.n	d5fae <_Z19__fetch_global_Wirev+0x36>
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f7fe f887 	bl	d409e <__cxa_guard_acquire>
   d5f90:	b168      	cbz	r0, d5fae <_Z19__fetch_global_Wirev+0x36>
   d5f92:	a801      	add	r0, sp, #4
   d5f94:	f7ff ffd8 	bl	d5f48 <_Z17acquireWireBufferv>
   d5f98:	aa01      	add	r2, sp, #4
   d5f9a:	4621      	mov	r1, r4
   d5f9c:	4806      	ldr	r0, [pc, #24]	; (d5fb8 <_Z19__fetch_global_Wirev+0x40>)
   d5f9e:	f7ff f863 	bl	d5068 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5fa2:	4628      	mov	r0, r5
   d5fa4:	f7fe f880 	bl	d40a8 <__cxa_guard_release>
   d5fa8:	4804      	ldr	r0, [pc, #16]	; (d5fbc <_Z19__fetch_global_Wirev+0x44>)
   d5faa:	f000 ffd3 	bl	d6f54 <atexit>
	return wire;
}
   d5fae:	4802      	ldr	r0, [pc, #8]	; (d5fb8 <_Z19__fetch_global_Wirev+0x40>)
   d5fb0:	b007      	add	sp, #28
   d5fb2:	bd30      	pop	{r4, r5, pc}
   d5fb4:	2003e73c 	.word	0x2003e73c
   d5fb8:	2003e740 	.word	0x2003e740
   d5fbc:	000d5f45 	.word	0x000d5f45

000d5fc0 <_ZdlPvj>:
   d5fc0:	f7fe b86b 	b.w	d409a <_ZdlPv>

000d5fc4 <_ZnajRKSt9nothrow_t>:
   d5fc4:	f7fe b867 	b.w	d4096 <_Znaj>

000d5fc8 <atan>:
   d5fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fcc:	ec55 4b10 	vmov	r4, r5, d0
   d5fd0:	4bcd      	ldr	r3, [pc, #820]	; (d6308 <atan+0x340>)
   d5fd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   d5fd6:	429e      	cmp	r6, r3
   d5fd8:	46aa      	mov	sl, r5
   d5fda:	dd0d      	ble.n	d5ff8 <atan+0x30>
   d5fdc:	4bcb      	ldr	r3, [pc, #812]	; (d630c <atan+0x344>)
   d5fde:	429e      	cmp	r6, r3
   d5fe0:	f300 80b5 	bgt.w	d614e <atan+0x186>
   d5fe4:	f000 80b0 	beq.w	d6148 <atan+0x180>
   d5fe8:	f1ba 0f00 	cmp.w	sl, #0
   d5fec:	f340 80f6 	ble.w	d61dc <atan+0x214>
   d5ff0:	ed9f 0ba9 	vldr	d0, [pc, #676]	; d6298 <atan+0x2d0>
   d5ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ff8:	4bc5      	ldr	r3, [pc, #788]	; (d6310 <atan+0x348>)
   d5ffa:	429e      	cmp	r6, r3
   d5ffc:	f300 80c3 	bgt.w	d6186 <atan+0x1be>
   d6000:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   d6004:	429e      	cmp	r6, r3
   d6006:	f340 80ac 	ble.w	d6162 <atan+0x19a>
   d600a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   d600e:	4622      	mov	r2, r4
   d6010:	462b      	mov	r3, r5
   d6012:	4620      	mov	r0, r4
   d6014:	4629      	mov	r1, r5
   d6016:	f000 fc75 	bl	d6904 <__aeabi_dmul>
   d601a:	4602      	mov	r2, r0
   d601c:	460b      	mov	r3, r1
   d601e:	4680      	mov	r8, r0
   d6020:	4689      	mov	r9, r1
   d6022:	f000 fc6f 	bl	d6904 <__aeabi_dmul>
   d6026:	a39e      	add	r3, pc, #632	; (adr r3, d62a0 <atan+0x2d8>)
   d6028:	e9d3 2300 	ldrd	r2, r3, [r3]
   d602c:	4606      	mov	r6, r0
   d602e:	460f      	mov	r7, r1
   d6030:	f000 fc68 	bl	d6904 <__aeabi_dmul>
   d6034:	a39c      	add	r3, pc, #624	; (adr r3, d62a8 <atan+0x2e0>)
   d6036:	e9d3 2300 	ldrd	r2, r3, [r3]
   d603a:	f000 faad 	bl	d6598 <__adddf3>
   d603e:	4632      	mov	r2, r6
   d6040:	463b      	mov	r3, r7
   d6042:	f000 fc5f 	bl	d6904 <__aeabi_dmul>
   d6046:	a39a      	add	r3, pc, #616	; (adr r3, d62b0 <atan+0x2e8>)
   d6048:	e9d3 2300 	ldrd	r2, r3, [r3]
   d604c:	f000 faa4 	bl	d6598 <__adddf3>
   d6050:	4632      	mov	r2, r6
   d6052:	463b      	mov	r3, r7
   d6054:	f000 fc56 	bl	d6904 <__aeabi_dmul>
   d6058:	a397      	add	r3, pc, #604	; (adr r3, d62b8 <atan+0x2f0>)
   d605a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d605e:	f000 fa9b 	bl	d6598 <__adddf3>
   d6062:	4632      	mov	r2, r6
   d6064:	463b      	mov	r3, r7
   d6066:	f000 fc4d 	bl	d6904 <__aeabi_dmul>
   d606a:	a395      	add	r3, pc, #596	; (adr r3, d62c0 <atan+0x2f8>)
   d606c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6070:	f000 fa92 	bl	d6598 <__adddf3>
   d6074:	4632      	mov	r2, r6
   d6076:	463b      	mov	r3, r7
   d6078:	f000 fc44 	bl	d6904 <__aeabi_dmul>
   d607c:	a392      	add	r3, pc, #584	; (adr r3, d62c8 <atan+0x300>)
   d607e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6082:	f000 fa89 	bl	d6598 <__adddf3>
   d6086:	4642      	mov	r2, r8
   d6088:	464b      	mov	r3, r9
   d608a:	f000 fc3b 	bl	d6904 <__aeabi_dmul>
   d608e:	a390      	add	r3, pc, #576	; (adr r3, d62d0 <atan+0x308>)
   d6090:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6094:	4680      	mov	r8, r0
   d6096:	4689      	mov	r9, r1
   d6098:	4630      	mov	r0, r6
   d609a:	4639      	mov	r1, r7
   d609c:	f000 fc32 	bl	d6904 <__aeabi_dmul>
   d60a0:	a38d      	add	r3, pc, #564	; (adr r3, d62d8 <atan+0x310>)
   d60a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60a6:	f000 fa75 	bl	d6594 <__aeabi_dsub>
   d60aa:	4632      	mov	r2, r6
   d60ac:	463b      	mov	r3, r7
   d60ae:	f000 fc29 	bl	d6904 <__aeabi_dmul>
   d60b2:	a38b      	add	r3, pc, #556	; (adr r3, d62e0 <atan+0x318>)
   d60b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60b8:	f000 fa6c 	bl	d6594 <__aeabi_dsub>
   d60bc:	4632      	mov	r2, r6
   d60be:	463b      	mov	r3, r7
   d60c0:	f000 fc20 	bl	d6904 <__aeabi_dmul>
   d60c4:	a388      	add	r3, pc, #544	; (adr r3, d62e8 <atan+0x320>)
   d60c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60ca:	f000 fa63 	bl	d6594 <__aeabi_dsub>
   d60ce:	4632      	mov	r2, r6
   d60d0:	463b      	mov	r3, r7
   d60d2:	f000 fc17 	bl	d6904 <__aeabi_dmul>
   d60d6:	a386      	add	r3, pc, #536	; (adr r3, d62f0 <atan+0x328>)
   d60d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60dc:	f000 fa5a 	bl	d6594 <__aeabi_dsub>
   d60e0:	4632      	mov	r2, r6
   d60e2:	463b      	mov	r3, r7
   d60e4:	f000 fc0e 	bl	d6904 <__aeabi_dmul>
   d60e8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   d60ec:	4602      	mov	r2, r0
   d60ee:	460b      	mov	r3, r1
   d60f0:	d078      	beq.n	d61e4 <atan+0x21c>
   d60f2:	4640      	mov	r0, r8
   d60f4:	4649      	mov	r1, r9
   d60f6:	f000 fa4f 	bl	d6598 <__adddf3>
   d60fa:	4e86      	ldr	r6, [pc, #536]	; (d6314 <atan+0x34c>)
   d60fc:	4622      	mov	r2, r4
   d60fe:	462b      	mov	r3, r5
   d6100:	f000 fc00 	bl	d6904 <__aeabi_dmul>
   d6104:	4b84      	ldr	r3, [pc, #528]	; (d6318 <atan+0x350>)
   d6106:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   d610a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   d610e:	449b      	add	fp, r3
   d6110:	e9db 2300 	ldrd	r2, r3, [fp]
   d6114:	f000 fa3e 	bl	d6594 <__aeabi_dsub>
   d6118:	4622      	mov	r2, r4
   d611a:	462b      	mov	r3, r5
   d611c:	f000 fa3a 	bl	d6594 <__aeabi_dsub>
   d6120:	4602      	mov	r2, r0
   d6122:	460b      	mov	r3, r1
   d6124:	e9d6 0100 	ldrd	r0, r1, [r6]
   d6128:	f000 fa34 	bl	d6594 <__aeabi_dsub>
   d612c:	f1ba 0f00 	cmp.w	sl, #0
   d6130:	ec41 0b10 	vmov	d0, r0, r1
   d6134:	da13      	bge.n	d615e <atan+0x196>
   d6136:	ee10 1a90 	vmov	r1, s1
   d613a:	4602      	mov	r2, r0
   d613c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6140:	ec43 2b10 	vmov	d0, r2, r3
   d6144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6148:	2c00      	cmp	r4, #0
   d614a:	f43f af4d 	beq.w	d5fe8 <atan+0x20>
   d614e:	4622      	mov	r2, r4
   d6150:	462b      	mov	r3, r5
   d6152:	4620      	mov	r0, r4
   d6154:	4629      	mov	r1, r5
   d6156:	f000 fa1f 	bl	d6598 <__adddf3>
   d615a:	ec41 0b10 	vmov	d0, r0, r1
   d615e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6162:	a365      	add	r3, pc, #404	; (adr r3, d62f8 <atan+0x330>)
   d6164:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6168:	ee10 0a10 	vmov	r0, s0
   d616c:	4629      	mov	r1, r5
   d616e:	f000 fa13 	bl	d6598 <__adddf3>
   d6172:	4b6a      	ldr	r3, [pc, #424]	; (d631c <atan+0x354>)
   d6174:	2200      	movs	r2, #0
   d6176:	f000 fe55 	bl	d6e24 <__aeabi_dcmpgt>
   d617a:	2800      	cmp	r0, #0
   d617c:	f43f af45 	beq.w	d600a <atan+0x42>
   d6180:	ec45 4b10 	vmov	d0, r4, r5
   d6184:	e7eb      	b.n	d615e <atan+0x196>
   d6186:	f000 f8d3 	bl	d6330 <fabs>
   d618a:	4b65      	ldr	r3, [pc, #404]	; (d6320 <atan+0x358>)
   d618c:	429e      	cmp	r6, r3
   d618e:	ec55 4b10 	vmov	r4, r5, d0
   d6192:	dc39      	bgt.n	d6208 <atan+0x240>
   d6194:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   d6198:	429e      	cmp	r6, r3
   d619a:	dc62      	bgt.n	d6262 <atan+0x29a>
   d619c:	ee10 2a10 	vmov	r2, s0
   d61a0:	ee10 0a10 	vmov	r0, s0
   d61a4:	462b      	mov	r3, r5
   d61a6:	4629      	mov	r1, r5
   d61a8:	f000 f9f6 	bl	d6598 <__adddf3>
   d61ac:	4b5b      	ldr	r3, [pc, #364]	; (d631c <atan+0x354>)
   d61ae:	2200      	movs	r2, #0
   d61b0:	f000 f9f0 	bl	d6594 <__aeabi_dsub>
   d61b4:	2200      	movs	r2, #0
   d61b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d61ba:	4606      	mov	r6, r0
   d61bc:	460f      	mov	r7, r1
   d61be:	4620      	mov	r0, r4
   d61c0:	4629      	mov	r1, r5
   d61c2:	f000 f9e9 	bl	d6598 <__adddf3>
   d61c6:	4602      	mov	r2, r0
   d61c8:	460b      	mov	r3, r1
   d61ca:	4630      	mov	r0, r6
   d61cc:	4639      	mov	r1, r7
   d61ce:	f000 fcc3 	bl	d6b58 <__aeabi_ddiv>
   d61d2:	f04f 0b00 	mov.w	fp, #0
   d61d6:	4604      	mov	r4, r0
   d61d8:	460d      	mov	r5, r1
   d61da:	e718      	b.n	d600e <atan+0x46>
   d61dc:	ed9f 0b48 	vldr	d0, [pc, #288]	; d6300 <atan+0x338>
   d61e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d61e4:	4640      	mov	r0, r8
   d61e6:	4649      	mov	r1, r9
   d61e8:	f000 f9d6 	bl	d6598 <__adddf3>
   d61ec:	4622      	mov	r2, r4
   d61ee:	462b      	mov	r3, r5
   d61f0:	f000 fb88 	bl	d6904 <__aeabi_dmul>
   d61f4:	4602      	mov	r2, r0
   d61f6:	460b      	mov	r3, r1
   d61f8:	4620      	mov	r0, r4
   d61fa:	4629      	mov	r1, r5
   d61fc:	f000 f9ca 	bl	d6594 <__aeabi_dsub>
   d6200:	ec41 0b10 	vmov	d0, r0, r1
   d6204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6208:	4b46      	ldr	r3, [pc, #280]	; (d6324 <atan+0x35c>)
   d620a:	429e      	cmp	r6, r3
   d620c:	da1d      	bge.n	d624a <atan+0x282>
   d620e:	ee10 0a10 	vmov	r0, s0
   d6212:	4b45      	ldr	r3, [pc, #276]	; (d6328 <atan+0x360>)
   d6214:	2200      	movs	r2, #0
   d6216:	4629      	mov	r1, r5
   d6218:	f000 f9bc 	bl	d6594 <__aeabi_dsub>
   d621c:	4b42      	ldr	r3, [pc, #264]	; (d6328 <atan+0x360>)
   d621e:	4606      	mov	r6, r0
   d6220:	460f      	mov	r7, r1
   d6222:	2200      	movs	r2, #0
   d6224:	4620      	mov	r0, r4
   d6226:	4629      	mov	r1, r5
   d6228:	f000 fb6c 	bl	d6904 <__aeabi_dmul>
   d622c:	4b3b      	ldr	r3, [pc, #236]	; (d631c <atan+0x354>)
   d622e:	2200      	movs	r2, #0
   d6230:	f000 f9b2 	bl	d6598 <__adddf3>
   d6234:	4602      	mov	r2, r0
   d6236:	460b      	mov	r3, r1
   d6238:	4630      	mov	r0, r6
   d623a:	4639      	mov	r1, r7
   d623c:	f000 fc8c 	bl	d6b58 <__aeabi_ddiv>
   d6240:	f04f 0b02 	mov.w	fp, #2
   d6244:	4604      	mov	r4, r0
   d6246:	460d      	mov	r5, r1
   d6248:	e6e1      	b.n	d600e <atan+0x46>
   d624a:	462b      	mov	r3, r5
   d624c:	ee10 2a10 	vmov	r2, s0
   d6250:	4936      	ldr	r1, [pc, #216]	; (d632c <atan+0x364>)
   d6252:	2000      	movs	r0, #0
   d6254:	f000 fc80 	bl	d6b58 <__aeabi_ddiv>
   d6258:	f04f 0b03 	mov.w	fp, #3
   d625c:	4604      	mov	r4, r0
   d625e:	460d      	mov	r5, r1
   d6260:	e6d5      	b.n	d600e <atan+0x46>
   d6262:	ee10 0a10 	vmov	r0, s0
   d6266:	4b2d      	ldr	r3, [pc, #180]	; (d631c <atan+0x354>)
   d6268:	2200      	movs	r2, #0
   d626a:	4629      	mov	r1, r5
   d626c:	f000 f992 	bl	d6594 <__aeabi_dsub>
   d6270:	4b2a      	ldr	r3, [pc, #168]	; (d631c <atan+0x354>)
   d6272:	2200      	movs	r2, #0
   d6274:	4606      	mov	r6, r0
   d6276:	460f      	mov	r7, r1
   d6278:	4620      	mov	r0, r4
   d627a:	4629      	mov	r1, r5
   d627c:	f000 f98c 	bl	d6598 <__adddf3>
   d6280:	4602      	mov	r2, r0
   d6282:	460b      	mov	r3, r1
   d6284:	4630      	mov	r0, r6
   d6286:	4639      	mov	r1, r7
   d6288:	f000 fc66 	bl	d6b58 <__aeabi_ddiv>
   d628c:	f04f 0b01 	mov.w	fp, #1
   d6290:	4604      	mov	r4, r0
   d6292:	460d      	mov	r5, r1
   d6294:	e6bb      	b.n	d600e <atan+0x46>
   d6296:	bf00      	nop
   d6298:	54442d18 	.word	0x54442d18
   d629c:	3ff921fb 	.word	0x3ff921fb
   d62a0:	e322da11 	.word	0xe322da11
   d62a4:	3f90ad3a 	.word	0x3f90ad3a
   d62a8:	24760deb 	.word	0x24760deb
   d62ac:	3fa97b4b 	.word	0x3fa97b4b
   d62b0:	a0d03d51 	.word	0xa0d03d51
   d62b4:	3fb10d66 	.word	0x3fb10d66
   d62b8:	c54c206e 	.word	0xc54c206e
   d62bc:	3fb745cd 	.word	0x3fb745cd
   d62c0:	920083ff 	.word	0x920083ff
   d62c4:	3fc24924 	.word	0x3fc24924
   d62c8:	5555550d 	.word	0x5555550d
   d62cc:	3fd55555 	.word	0x3fd55555
   d62d0:	2c6a6c2f 	.word	0x2c6a6c2f
   d62d4:	bfa2b444 	.word	0xbfa2b444
   d62d8:	52defd9a 	.word	0x52defd9a
   d62dc:	3fadde2d 	.word	0x3fadde2d
   d62e0:	af749a6d 	.word	0xaf749a6d
   d62e4:	3fb3b0f2 	.word	0x3fb3b0f2
   d62e8:	fe231671 	.word	0xfe231671
   d62ec:	3fbc71c6 	.word	0x3fbc71c6
   d62f0:	9998ebc4 	.word	0x9998ebc4
   d62f4:	3fc99999 	.word	0x3fc99999
   d62f8:	8800759c 	.word	0x8800759c
   d62fc:	7e37e43c 	.word	0x7e37e43c
   d6300:	54442d18 	.word	0x54442d18
   d6304:	bff921fb 	.word	0xbff921fb
   d6308:	440fffff 	.word	0x440fffff
   d630c:	7ff00000 	.word	0x7ff00000
   d6310:	3fdbffff 	.word	0x3fdbffff
   d6314:	000d72d0 	.word	0x000d72d0
   d6318:	000d72f0 	.word	0x000d72f0
   d631c:	3ff00000 	.word	0x3ff00000
   d6320:	3ff2ffff 	.word	0x3ff2ffff
   d6324:	40038000 	.word	0x40038000
   d6328:	3ff80000 	.word	0x3ff80000
   d632c:	bff00000 	.word	0xbff00000

000d6330 <fabs>:
   d6330:	ec51 0b10 	vmov	r0, r1, d0
   d6334:	ee10 2a10 	vmov	r2, s0
   d6338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d633c:	ec43 2b10 	vmov	d0, r2, r3
   d6340:	4770      	bx	lr
   d6342:	bf00      	nop

000d6344 <sqrt>:
   d6344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6348:	ed2d 8b02 	vpush	{d8}
   d634c:	b08b      	sub	sp, #44	; 0x2c
   d634e:	ec55 4b10 	vmov	r4, r5, d0
   d6352:	f000 f855 	bl	d6400 <__ieee754_sqrt>
   d6356:	4b28      	ldr	r3, [pc, #160]	; (d63f8 <sqrt+0xb4>)
   d6358:	eeb0 8a40 	vmov.f32	s16, s0
   d635c:	eef0 8a60 	vmov.f32	s17, s1
   d6360:	f993 7000 	ldrsb.w	r7, [r3]
   d6364:	1c7b      	adds	r3, r7, #1
   d6366:	d012      	beq.n	d638e <sqrt+0x4a>
   d6368:	4622      	mov	r2, r4
   d636a:	462b      	mov	r3, r5
   d636c:	4620      	mov	r0, r4
   d636e:	4629      	mov	r1, r5
   d6370:	f000 fd62 	bl	d6e38 <__aeabi_dcmpun>
   d6374:	4606      	mov	r6, r0
   d6376:	b950      	cbnz	r0, d638e <sqrt+0x4a>
   d6378:	f04f 0800 	mov.w	r8, #0
   d637c:	f04f 0900 	mov.w	r9, #0
   d6380:	4620      	mov	r0, r4
   d6382:	4629      	mov	r1, r5
   d6384:	4642      	mov	r2, r8
   d6386:	464b      	mov	r3, r9
   d6388:	f000 fd2e 	bl	d6de8 <__aeabi_dcmplt>
   d638c:	b940      	cbnz	r0, d63a0 <sqrt+0x5c>
   d638e:	eeb0 0a48 	vmov.f32	s0, s16
   d6392:	eef0 0a68 	vmov.f32	s1, s17
   d6396:	b00b      	add	sp, #44	; 0x2c
   d6398:	ecbd 8b02 	vpop	{d8}
   d639c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d63a0:	4b16      	ldr	r3, [pc, #88]	; (d63fc <sqrt+0xb8>)
   d63a2:	9608      	str	r6, [sp, #32]
   d63a4:	2201      	movs	r2, #1
   d63a6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d63aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d63ae:	9200      	str	r2, [sp, #0]
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	b197      	cbz	r7, d63da <sqrt+0x96>
   d63b4:	4642      	mov	r2, r8
   d63b6:	464b      	mov	r3, r9
   d63b8:	4640      	mov	r0, r8
   d63ba:	4649      	mov	r1, r9
   d63bc:	f000 fbcc 	bl	d6b58 <__aeabi_ddiv>
   d63c0:	2f02      	cmp	r7, #2
   d63c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d63c6:	d10a      	bne.n	d63de <sqrt+0x9a>
   d63c8:	f7fe fdc8 	bl	d4f5c <__errno>
   d63cc:	2321      	movs	r3, #33	; 0x21
   d63ce:	6003      	str	r3, [r0, #0]
   d63d0:	9b08      	ldr	r3, [sp, #32]
   d63d2:	b963      	cbnz	r3, d63ee <sqrt+0xaa>
   d63d4:	ed9d 8b06 	vldr	d8, [sp, #24]
   d63d8:	e7d9      	b.n	d638e <sqrt+0x4a>
   d63da:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d63de:	4668      	mov	r0, sp
   d63e0:	f000 f8d2 	bl	d6588 <matherr>
   d63e4:	2800      	cmp	r0, #0
   d63e6:	d0ef      	beq.n	d63c8 <sqrt+0x84>
   d63e8:	9b08      	ldr	r3, [sp, #32]
   d63ea:	2b00      	cmp	r3, #0
   d63ec:	d0f2      	beq.n	d63d4 <sqrt+0x90>
   d63ee:	f7fe fdb5 	bl	d4f5c <__errno>
   d63f2:	9b08      	ldr	r3, [sp, #32]
   d63f4:	6003      	str	r3, [r0, #0]
   d63f6:	e7ed      	b.n	d63d4 <sqrt+0x90>
   d63f8:	2003e480 	.word	0x2003e480
   d63fc:	000d7310 	.word	0x000d7310

000d6400 <__ieee754_sqrt>:
   d6400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6404:	4a5f      	ldr	r2, [pc, #380]	; (d6584 <__ieee754_sqrt+0x184>)
   d6406:	ec57 6b10 	vmov	r6, r7, d0
   d640a:	43ba      	bics	r2, r7
   d640c:	f000 8098 	beq.w	d6540 <__ieee754_sqrt+0x140>
   d6410:	2f00      	cmp	r7, #0
   d6412:	ee10 4a10 	vmov	r4, s0
   d6416:	463b      	mov	r3, r7
   d6418:	dd4e      	ble.n	d64b8 <__ieee754_sqrt+0xb8>
   d641a:	1539      	asrs	r1, r7, #20
   d641c:	d05b      	beq.n	d64d6 <__ieee754_sqrt+0xd6>
   d641e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6422:	07ca      	lsls	r2, r1, #31
   d6424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6428:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d642c:	d403      	bmi.n	d6436 <__ieee754_sqrt+0x36>
   d642e:	005b      	lsls	r3, r3, #1
   d6430:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d6434:	0064      	lsls	r4, r4, #1
   d6436:	0fe2      	lsrs	r2, r4, #31
   d6438:	f04f 0c00 	mov.w	ip, #0
   d643c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6440:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d6444:	0064      	lsls	r4, r4, #1
   d6446:	4666      	mov	r6, ip
   d6448:	2516      	movs	r5, #22
   d644a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d644e:	18b1      	adds	r1, r6, r2
   d6450:	4299      	cmp	r1, r3
   d6452:	dc02      	bgt.n	d645a <__ieee754_sqrt+0x5a>
   d6454:	1a5b      	subs	r3, r3, r1
   d6456:	188e      	adds	r6, r1, r2
   d6458:	4494      	add	ip, r2
   d645a:	005b      	lsls	r3, r3, #1
   d645c:	3d01      	subs	r5, #1
   d645e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d6462:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d6466:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d646a:	d1f0      	bne.n	d644e <__ieee754_sqrt+0x4e>
   d646c:	462f      	mov	r7, r5
   d646e:	2020      	movs	r0, #32
   d6470:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d6474:	e009      	b.n	d648a <__ieee754_sqrt+0x8a>
   d6476:	d03e      	beq.n	d64f6 <__ieee754_sqrt+0xf6>
   d6478:	0fe1      	lsrs	r1, r4, #31
   d647a:	3801      	subs	r0, #1
   d647c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d6480:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d6484:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d6488:	d03e      	beq.n	d6508 <__ieee754_sqrt+0x108>
   d648a:	42b3      	cmp	r3, r6
   d648c:	eb02 0105 	add.w	r1, r2, r5
   d6490:	ddf1      	ble.n	d6476 <__ieee754_sqrt+0x76>
   d6492:	2900      	cmp	r1, #0
   d6494:	eb01 0502 	add.w	r5, r1, r2
   d6498:	db09      	blt.n	d64ae <__ieee754_sqrt+0xae>
   d649a:	46b0      	mov	r8, r6
   d649c:	1b9b      	subs	r3, r3, r6
   d649e:	42a1      	cmp	r1, r4
   d64a0:	bf88      	it	hi
   d64a2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d64a6:	1a64      	subs	r4, r4, r1
   d64a8:	4417      	add	r7, r2
   d64aa:	4646      	mov	r6, r8
   d64ac:	e7e4      	b.n	d6478 <__ieee754_sqrt+0x78>
   d64ae:	2d00      	cmp	r5, #0
   d64b0:	dbf3      	blt.n	d649a <__ieee754_sqrt+0x9a>
   d64b2:	f106 0801 	add.w	r8, r6, #1
   d64b6:	e7f1      	b.n	d649c <__ieee754_sqrt+0x9c>
   d64b8:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d64bc:	4332      	orrs	r2, r6
   d64be:	d036      	beq.n	d652e <__ieee754_sqrt+0x12e>
   d64c0:	2f00      	cmp	r7, #0
   d64c2:	d14d      	bne.n	d6560 <__ieee754_sqrt+0x160>
   d64c4:	4639      	mov	r1, r7
   d64c6:	0ae2      	lsrs	r2, r4, #11
   d64c8:	3915      	subs	r1, #21
   d64ca:	0564      	lsls	r4, r4, #21
   d64cc:	4613      	mov	r3, r2
   d64ce:	2a00      	cmp	r2, #0
   d64d0:	d0f9      	beq.n	d64c6 <__ieee754_sqrt+0xc6>
   d64d2:	02d7      	lsls	r7, r2, #11
   d64d4:	d451      	bmi.n	d657a <__ieee754_sqrt+0x17a>
   d64d6:	2000      	movs	r0, #0
   d64d8:	005b      	lsls	r3, r3, #1
   d64da:	02de      	lsls	r6, r3, #11
   d64dc:	4605      	mov	r5, r0
   d64de:	f100 0001 	add.w	r0, r0, #1
   d64e2:	d5f9      	bpl.n	d64d8 <__ieee754_sqrt+0xd8>
   d64e4:	461a      	mov	r2, r3
   d64e6:	4623      	mov	r3, r4
   d64e8:	4084      	lsls	r4, r0
   d64ea:	f1c0 0020 	rsb	r0, r0, #32
   d64ee:	40c3      	lsrs	r3, r0
   d64f0:	4313      	orrs	r3, r2
   d64f2:	1b49      	subs	r1, r1, r5
   d64f4:	e793      	b.n	d641e <__ieee754_sqrt+0x1e>
   d64f6:	42a1      	cmp	r1, r4
   d64f8:	d8be      	bhi.n	d6478 <__ieee754_sqrt+0x78>
   d64fa:	2900      	cmp	r1, #0
   d64fc:	eb01 0502 	add.w	r5, r1, r2
   d6500:	dbd5      	blt.n	d64ae <__ieee754_sqrt+0xae>
   d6502:	4698      	mov	r8, r3
   d6504:	2300      	movs	r3, #0
   d6506:	e7ce      	b.n	d64a6 <__ieee754_sqrt+0xa6>
   d6508:	4323      	orrs	r3, r4
   d650a:	d112      	bne.n	d6532 <__ieee754_sqrt+0x132>
   d650c:	0878      	lsrs	r0, r7, #1
   d650e:	ea4f 016c 	mov.w	r1, ip, asr #1
   d6512:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6516:	f01c 0f01 	tst.w	ip, #1
   d651a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d651e:	bf18      	it	ne
   d6520:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d6524:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d6528:	4602      	mov	r2, r0
   d652a:	ec43 2b10 	vmov	d0, r2, r3
   d652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6532:	1c7b      	adds	r3, r7, #1
   d6534:	bf16      	itet	ne
   d6536:	1c78      	addne	r0, r7, #1
   d6538:	f10c 0c01 	addeq.w	ip, ip, #1
   d653c:	0840      	lsrne	r0, r0, #1
   d653e:	e7e6      	b.n	d650e <__ieee754_sqrt+0x10e>
   d6540:	ee10 2a10 	vmov	r2, s0
   d6544:	ee10 0a10 	vmov	r0, s0
   d6548:	463b      	mov	r3, r7
   d654a:	4639      	mov	r1, r7
   d654c:	f000 f9da 	bl	d6904 <__aeabi_dmul>
   d6550:	4632      	mov	r2, r6
   d6552:	463b      	mov	r3, r7
   d6554:	f000 f820 	bl	d6598 <__adddf3>
   d6558:	ec41 0b10 	vmov	d0, r0, r1
   d655c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6560:	ee10 2a10 	vmov	r2, s0
   d6564:	4630      	mov	r0, r6
   d6566:	4639      	mov	r1, r7
   d6568:	f000 f814 	bl	d6594 <__aeabi_dsub>
   d656c:	4602      	mov	r2, r0
   d656e:	460b      	mov	r3, r1
   d6570:	f000 faf2 	bl	d6b58 <__aeabi_ddiv>
   d6574:	ec41 0b10 	vmov	d0, r0, r1
   d6578:	e7d9      	b.n	d652e <__ieee754_sqrt+0x12e>
   d657a:	4623      	mov	r3, r4
   d657c:	2020      	movs	r0, #32
   d657e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d6582:	e7b4      	b.n	d64ee <__ieee754_sqrt+0xee>
   d6584:	7ff00000 	.word	0x7ff00000

000d6588 <matherr>:
   d6588:	2000      	movs	r0, #0
   d658a:	4770      	bx	lr

000d658c <__aeabi_drsub>:
   d658c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6590:	e002      	b.n	d6598 <__adddf3>
   d6592:	bf00      	nop

000d6594 <__aeabi_dsub>:
   d6594:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6598 <__adddf3>:
   d6598:	b530      	push	{r4, r5, lr}
   d659a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d659e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d65a2:	ea94 0f05 	teq	r4, r5
   d65a6:	bf08      	it	eq
   d65a8:	ea90 0f02 	teqeq	r0, r2
   d65ac:	bf1f      	itttt	ne
   d65ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d65b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d65b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d65ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d65be:	f000 80e2 	beq.w	d6786 <__adddf3+0x1ee>
   d65c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d65c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d65ca:	bfb8      	it	lt
   d65cc:	426d      	neglt	r5, r5
   d65ce:	dd0c      	ble.n	d65ea <__adddf3+0x52>
   d65d0:	442c      	add	r4, r5
   d65d2:	ea80 0202 	eor.w	r2, r0, r2
   d65d6:	ea81 0303 	eor.w	r3, r1, r3
   d65da:	ea82 0000 	eor.w	r0, r2, r0
   d65de:	ea83 0101 	eor.w	r1, r3, r1
   d65e2:	ea80 0202 	eor.w	r2, r0, r2
   d65e6:	ea81 0303 	eor.w	r3, r1, r3
   d65ea:	2d36      	cmp	r5, #54	; 0x36
   d65ec:	bf88      	it	hi
   d65ee:	bd30      	pophi	{r4, r5, pc}
   d65f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d65fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6600:	d002      	beq.n	d6608 <__adddf3+0x70>
   d6602:	4240      	negs	r0, r0
   d6604:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6608:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d660c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6610:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6614:	d002      	beq.n	d661c <__adddf3+0x84>
   d6616:	4252      	negs	r2, r2
   d6618:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d661c:	ea94 0f05 	teq	r4, r5
   d6620:	f000 80a7 	beq.w	d6772 <__adddf3+0x1da>
   d6624:	f1a4 0401 	sub.w	r4, r4, #1
   d6628:	f1d5 0e20 	rsbs	lr, r5, #32
   d662c:	db0d      	blt.n	d664a <__adddf3+0xb2>
   d662e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6632:	fa22 f205 	lsr.w	r2, r2, r5
   d6636:	1880      	adds	r0, r0, r2
   d6638:	f141 0100 	adc.w	r1, r1, #0
   d663c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6640:	1880      	adds	r0, r0, r2
   d6642:	fa43 f305 	asr.w	r3, r3, r5
   d6646:	4159      	adcs	r1, r3
   d6648:	e00e      	b.n	d6668 <__adddf3+0xd0>
   d664a:	f1a5 0520 	sub.w	r5, r5, #32
   d664e:	f10e 0e20 	add.w	lr, lr, #32
   d6652:	2a01      	cmp	r2, #1
   d6654:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6658:	bf28      	it	cs
   d665a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d665e:	fa43 f305 	asr.w	r3, r3, r5
   d6662:	18c0      	adds	r0, r0, r3
   d6664:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d666c:	d507      	bpl.n	d667e <__adddf3+0xe6>
   d666e:	f04f 0e00 	mov.w	lr, #0
   d6672:	f1dc 0c00 	rsbs	ip, ip, #0
   d6676:	eb7e 0000 	sbcs.w	r0, lr, r0
   d667a:	eb6e 0101 	sbc.w	r1, lr, r1
   d667e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6682:	d31b      	bcc.n	d66bc <__adddf3+0x124>
   d6684:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6688:	d30c      	bcc.n	d66a4 <__adddf3+0x10c>
   d668a:	0849      	lsrs	r1, r1, #1
   d668c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6690:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6694:	f104 0401 	add.w	r4, r4, #1
   d6698:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d669c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d66a0:	f080 809a 	bcs.w	d67d8 <__adddf3+0x240>
   d66a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d66a8:	bf08      	it	eq
   d66aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66ae:	f150 0000 	adcs.w	r0, r0, #0
   d66b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66b6:	ea41 0105 	orr.w	r1, r1, r5
   d66ba:	bd30      	pop	{r4, r5, pc}
   d66bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d66c0:	4140      	adcs	r0, r0
   d66c2:	eb41 0101 	adc.w	r1, r1, r1
   d66c6:	3c01      	subs	r4, #1
   d66c8:	bf28      	it	cs
   d66ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d66ce:	d2e9      	bcs.n	d66a4 <__adddf3+0x10c>
   d66d0:	f091 0f00 	teq	r1, #0
   d66d4:	bf04      	itt	eq
   d66d6:	4601      	moveq	r1, r0
   d66d8:	2000      	moveq	r0, #0
   d66da:	fab1 f381 	clz	r3, r1
   d66de:	bf08      	it	eq
   d66e0:	3320      	addeq	r3, #32
   d66e2:	f1a3 030b 	sub.w	r3, r3, #11
   d66e6:	f1b3 0220 	subs.w	r2, r3, #32
   d66ea:	da0c      	bge.n	d6706 <__adddf3+0x16e>
   d66ec:	320c      	adds	r2, #12
   d66ee:	dd08      	ble.n	d6702 <__adddf3+0x16a>
   d66f0:	f102 0c14 	add.w	ip, r2, #20
   d66f4:	f1c2 020c 	rsb	r2, r2, #12
   d66f8:	fa01 f00c 	lsl.w	r0, r1, ip
   d66fc:	fa21 f102 	lsr.w	r1, r1, r2
   d6700:	e00c      	b.n	d671c <__adddf3+0x184>
   d6702:	f102 0214 	add.w	r2, r2, #20
   d6706:	bfd8      	it	le
   d6708:	f1c2 0c20 	rsble	ip, r2, #32
   d670c:	fa01 f102 	lsl.w	r1, r1, r2
   d6710:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6714:	bfdc      	itt	le
   d6716:	ea41 010c 	orrle.w	r1, r1, ip
   d671a:	4090      	lslle	r0, r2
   d671c:	1ae4      	subs	r4, r4, r3
   d671e:	bfa2      	ittt	ge
   d6720:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6724:	4329      	orrge	r1, r5
   d6726:	bd30      	popge	{r4, r5, pc}
   d6728:	ea6f 0404 	mvn.w	r4, r4
   d672c:	3c1f      	subs	r4, #31
   d672e:	da1c      	bge.n	d676a <__adddf3+0x1d2>
   d6730:	340c      	adds	r4, #12
   d6732:	dc0e      	bgt.n	d6752 <__adddf3+0x1ba>
   d6734:	f104 0414 	add.w	r4, r4, #20
   d6738:	f1c4 0220 	rsb	r2, r4, #32
   d673c:	fa20 f004 	lsr.w	r0, r0, r4
   d6740:	fa01 f302 	lsl.w	r3, r1, r2
   d6744:	ea40 0003 	orr.w	r0, r0, r3
   d6748:	fa21 f304 	lsr.w	r3, r1, r4
   d674c:	ea45 0103 	orr.w	r1, r5, r3
   d6750:	bd30      	pop	{r4, r5, pc}
   d6752:	f1c4 040c 	rsb	r4, r4, #12
   d6756:	f1c4 0220 	rsb	r2, r4, #32
   d675a:	fa20 f002 	lsr.w	r0, r0, r2
   d675e:	fa01 f304 	lsl.w	r3, r1, r4
   d6762:	ea40 0003 	orr.w	r0, r0, r3
   d6766:	4629      	mov	r1, r5
   d6768:	bd30      	pop	{r4, r5, pc}
   d676a:	fa21 f004 	lsr.w	r0, r1, r4
   d676e:	4629      	mov	r1, r5
   d6770:	bd30      	pop	{r4, r5, pc}
   d6772:	f094 0f00 	teq	r4, #0
   d6776:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d677a:	bf06      	itte	eq
   d677c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6780:	3401      	addeq	r4, #1
   d6782:	3d01      	subne	r5, #1
   d6784:	e74e      	b.n	d6624 <__adddf3+0x8c>
   d6786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d678a:	bf18      	it	ne
   d678c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6790:	d029      	beq.n	d67e6 <__adddf3+0x24e>
   d6792:	ea94 0f05 	teq	r4, r5
   d6796:	bf08      	it	eq
   d6798:	ea90 0f02 	teqeq	r0, r2
   d679c:	d005      	beq.n	d67aa <__adddf3+0x212>
   d679e:	ea54 0c00 	orrs.w	ip, r4, r0
   d67a2:	bf04      	itt	eq
   d67a4:	4619      	moveq	r1, r3
   d67a6:	4610      	moveq	r0, r2
   d67a8:	bd30      	pop	{r4, r5, pc}
   d67aa:	ea91 0f03 	teq	r1, r3
   d67ae:	bf1e      	ittt	ne
   d67b0:	2100      	movne	r1, #0
   d67b2:	2000      	movne	r0, #0
   d67b4:	bd30      	popne	{r4, r5, pc}
   d67b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d67ba:	d105      	bne.n	d67c8 <__adddf3+0x230>
   d67bc:	0040      	lsls	r0, r0, #1
   d67be:	4149      	adcs	r1, r1
   d67c0:	bf28      	it	cs
   d67c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d67c6:	bd30      	pop	{r4, r5, pc}
   d67c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d67cc:	bf3c      	itt	cc
   d67ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d67d2:	bd30      	popcc	{r4, r5, pc}
   d67d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d67dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67e0:	f04f 0000 	mov.w	r0, #0
   d67e4:	bd30      	pop	{r4, r5, pc}
   d67e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67ea:	bf1a      	itte	ne
   d67ec:	4619      	movne	r1, r3
   d67ee:	4610      	movne	r0, r2
   d67f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d67f4:	bf1c      	itt	ne
   d67f6:	460b      	movne	r3, r1
   d67f8:	4602      	movne	r2, r0
   d67fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67fe:	bf06      	itte	eq
   d6800:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6804:	ea91 0f03 	teqeq	r1, r3
   d6808:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d680c:	bd30      	pop	{r4, r5, pc}
   d680e:	bf00      	nop

000d6810 <__aeabi_ui2d>:
   d6810:	f090 0f00 	teq	r0, #0
   d6814:	bf04      	itt	eq
   d6816:	2100      	moveq	r1, #0
   d6818:	4770      	bxeq	lr
   d681a:	b530      	push	{r4, r5, lr}
   d681c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6820:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6824:	f04f 0500 	mov.w	r5, #0
   d6828:	f04f 0100 	mov.w	r1, #0
   d682c:	e750      	b.n	d66d0 <__adddf3+0x138>
   d682e:	bf00      	nop

000d6830 <__aeabi_i2d>:
   d6830:	f090 0f00 	teq	r0, #0
   d6834:	bf04      	itt	eq
   d6836:	2100      	moveq	r1, #0
   d6838:	4770      	bxeq	lr
   d683a:	b530      	push	{r4, r5, lr}
   d683c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6840:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6844:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6848:	bf48      	it	mi
   d684a:	4240      	negmi	r0, r0
   d684c:	f04f 0100 	mov.w	r1, #0
   d6850:	e73e      	b.n	d66d0 <__adddf3+0x138>
   d6852:	bf00      	nop

000d6854 <__aeabi_f2d>:
   d6854:	0042      	lsls	r2, r0, #1
   d6856:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d685a:	ea4f 0131 	mov.w	r1, r1, rrx
   d685e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6862:	bf1f      	itttt	ne
   d6864:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6868:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d686c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6870:	4770      	bxne	lr
   d6872:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6876:	bf08      	it	eq
   d6878:	4770      	bxeq	lr
   d687a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d687e:	bf04      	itt	eq
   d6880:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6884:	4770      	bxeq	lr
   d6886:	b530      	push	{r4, r5, lr}
   d6888:	f44f 7460 	mov.w	r4, #896	; 0x380
   d688c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6894:	e71c      	b.n	d66d0 <__adddf3+0x138>
   d6896:	bf00      	nop

000d6898 <__aeabi_ul2d>:
   d6898:	ea50 0201 	orrs.w	r2, r0, r1
   d689c:	bf08      	it	eq
   d689e:	4770      	bxeq	lr
   d68a0:	b530      	push	{r4, r5, lr}
   d68a2:	f04f 0500 	mov.w	r5, #0
   d68a6:	e00a      	b.n	d68be <__aeabi_l2d+0x16>

000d68a8 <__aeabi_l2d>:
   d68a8:	ea50 0201 	orrs.w	r2, r0, r1
   d68ac:	bf08      	it	eq
   d68ae:	4770      	bxeq	lr
   d68b0:	b530      	push	{r4, r5, lr}
   d68b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d68b6:	d502      	bpl.n	d68be <__aeabi_l2d+0x16>
   d68b8:	4240      	negs	r0, r0
   d68ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d68be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d68ca:	f43f aed8 	beq.w	d667e <__adddf3+0xe6>
   d68ce:	f04f 0203 	mov.w	r2, #3
   d68d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68d6:	bf18      	it	ne
   d68d8:	3203      	addne	r2, #3
   d68da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d68de:	bf18      	it	ne
   d68e0:	3203      	addne	r2, #3
   d68e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d68e6:	f1c2 0320 	rsb	r3, r2, #32
   d68ea:	fa00 fc03 	lsl.w	ip, r0, r3
   d68ee:	fa20 f002 	lsr.w	r0, r0, r2
   d68f2:	fa01 fe03 	lsl.w	lr, r1, r3
   d68f6:	ea40 000e 	orr.w	r0, r0, lr
   d68fa:	fa21 f102 	lsr.w	r1, r1, r2
   d68fe:	4414      	add	r4, r2
   d6900:	e6bd      	b.n	d667e <__adddf3+0xe6>
   d6902:	bf00      	nop

000d6904 <__aeabi_dmul>:
   d6904:	b570      	push	{r4, r5, r6, lr}
   d6906:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d690a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d690e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6912:	bf1d      	ittte	ne
   d6914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6918:	ea94 0f0c 	teqne	r4, ip
   d691c:	ea95 0f0c 	teqne	r5, ip
   d6920:	f000 f8de 	bleq	d6ae0 <__aeabi_dmul+0x1dc>
   d6924:	442c      	add	r4, r5
   d6926:	ea81 0603 	eor.w	r6, r1, r3
   d692a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d692e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6932:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6936:	bf18      	it	ne
   d6938:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d693c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6944:	d038      	beq.n	d69b8 <__aeabi_dmul+0xb4>
   d6946:	fba0 ce02 	umull	ip, lr, r0, r2
   d694a:	f04f 0500 	mov.w	r5, #0
   d694e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6952:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6956:	fbe0 e503 	umlal	lr, r5, r0, r3
   d695a:	f04f 0600 	mov.w	r6, #0
   d695e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6962:	f09c 0f00 	teq	ip, #0
   d6966:	bf18      	it	ne
   d6968:	f04e 0e01 	orrne.w	lr, lr, #1
   d696c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6970:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6974:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6978:	d204      	bcs.n	d6984 <__aeabi_dmul+0x80>
   d697a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d697e:	416d      	adcs	r5, r5
   d6980:	eb46 0606 	adc.w	r6, r6, r6
   d6984:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6988:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d698c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6990:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6994:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6998:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d699c:	bf88      	it	hi
   d699e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d69a2:	d81e      	bhi.n	d69e2 <__aeabi_dmul+0xde>
   d69a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d69a8:	bf08      	it	eq
   d69aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d69ae:	f150 0000 	adcs.w	r0, r0, #0
   d69b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69b6:	bd70      	pop	{r4, r5, r6, pc}
   d69b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d69bc:	ea46 0101 	orr.w	r1, r6, r1
   d69c0:	ea40 0002 	orr.w	r0, r0, r2
   d69c4:	ea81 0103 	eor.w	r1, r1, r3
   d69c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d69cc:	bfc2      	ittt	gt
   d69ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d69d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d69d6:	bd70      	popgt	{r4, r5, r6, pc}
   d69d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d69dc:	f04f 0e00 	mov.w	lr, #0
   d69e0:	3c01      	subs	r4, #1
   d69e2:	f300 80ab 	bgt.w	d6b3c <__aeabi_dmul+0x238>
   d69e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d69ea:	bfde      	ittt	le
   d69ec:	2000      	movle	r0, #0
   d69ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d69f2:	bd70      	pople	{r4, r5, r6, pc}
   d69f4:	f1c4 0400 	rsb	r4, r4, #0
   d69f8:	3c20      	subs	r4, #32
   d69fa:	da35      	bge.n	d6a68 <__aeabi_dmul+0x164>
   d69fc:	340c      	adds	r4, #12
   d69fe:	dc1b      	bgt.n	d6a38 <__aeabi_dmul+0x134>
   d6a00:	f104 0414 	add.w	r4, r4, #20
   d6a04:	f1c4 0520 	rsb	r5, r4, #32
   d6a08:	fa00 f305 	lsl.w	r3, r0, r5
   d6a0c:	fa20 f004 	lsr.w	r0, r0, r4
   d6a10:	fa01 f205 	lsl.w	r2, r1, r5
   d6a14:	ea40 0002 	orr.w	r0, r0, r2
   d6a18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a24:	fa21 f604 	lsr.w	r6, r1, r4
   d6a28:	eb42 0106 	adc.w	r1, r2, r6
   d6a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a30:	bf08      	it	eq
   d6a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a36:	bd70      	pop	{r4, r5, r6, pc}
   d6a38:	f1c4 040c 	rsb	r4, r4, #12
   d6a3c:	f1c4 0520 	rsb	r5, r4, #32
   d6a40:	fa00 f304 	lsl.w	r3, r0, r4
   d6a44:	fa20 f005 	lsr.w	r0, r0, r5
   d6a48:	fa01 f204 	lsl.w	r2, r1, r4
   d6a4c:	ea40 0002 	orr.w	r0, r0, r2
   d6a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a58:	f141 0100 	adc.w	r1, r1, #0
   d6a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a60:	bf08      	it	eq
   d6a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a66:	bd70      	pop	{r4, r5, r6, pc}
   d6a68:	f1c4 0520 	rsb	r5, r4, #32
   d6a6c:	fa00 f205 	lsl.w	r2, r0, r5
   d6a70:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a74:	fa20 f304 	lsr.w	r3, r0, r4
   d6a78:	fa01 f205 	lsl.w	r2, r1, r5
   d6a7c:	ea43 0302 	orr.w	r3, r3, r2
   d6a80:	fa21 f004 	lsr.w	r0, r1, r4
   d6a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a88:	fa21 f204 	lsr.w	r2, r1, r4
   d6a8c:	ea20 0002 	bic.w	r0, r0, r2
   d6a90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a98:	bf08      	it	eq
   d6a9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a9e:	bd70      	pop	{r4, r5, r6, pc}
   d6aa0:	f094 0f00 	teq	r4, #0
   d6aa4:	d10f      	bne.n	d6ac6 <__aeabi_dmul+0x1c2>
   d6aa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6aaa:	0040      	lsls	r0, r0, #1
   d6aac:	eb41 0101 	adc.w	r1, r1, r1
   d6ab0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ab4:	bf08      	it	eq
   d6ab6:	3c01      	subeq	r4, #1
   d6ab8:	d0f7      	beq.n	d6aaa <__aeabi_dmul+0x1a6>
   d6aba:	ea41 0106 	orr.w	r1, r1, r6
   d6abe:	f095 0f00 	teq	r5, #0
   d6ac2:	bf18      	it	ne
   d6ac4:	4770      	bxne	lr
   d6ac6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6aca:	0052      	lsls	r2, r2, #1
   d6acc:	eb43 0303 	adc.w	r3, r3, r3
   d6ad0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ad4:	bf08      	it	eq
   d6ad6:	3d01      	subeq	r5, #1
   d6ad8:	d0f7      	beq.n	d6aca <__aeabi_dmul+0x1c6>
   d6ada:	ea43 0306 	orr.w	r3, r3, r6
   d6ade:	4770      	bx	lr
   d6ae0:	ea94 0f0c 	teq	r4, ip
   d6ae4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ae8:	bf18      	it	ne
   d6aea:	ea95 0f0c 	teqne	r5, ip
   d6aee:	d00c      	beq.n	d6b0a <__aeabi_dmul+0x206>
   d6af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6af4:	bf18      	it	ne
   d6af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6afa:	d1d1      	bne.n	d6aa0 <__aeabi_dmul+0x19c>
   d6afc:	ea81 0103 	eor.w	r1, r1, r3
   d6b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b04:	f04f 0000 	mov.w	r0, #0
   d6b08:	bd70      	pop	{r4, r5, r6, pc}
   d6b0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b0e:	bf06      	itte	eq
   d6b10:	4610      	moveq	r0, r2
   d6b12:	4619      	moveq	r1, r3
   d6b14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b18:	d019      	beq.n	d6b4e <__aeabi_dmul+0x24a>
   d6b1a:	ea94 0f0c 	teq	r4, ip
   d6b1e:	d102      	bne.n	d6b26 <__aeabi_dmul+0x222>
   d6b20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6b24:	d113      	bne.n	d6b4e <__aeabi_dmul+0x24a>
   d6b26:	ea95 0f0c 	teq	r5, ip
   d6b2a:	d105      	bne.n	d6b38 <__aeabi_dmul+0x234>
   d6b2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6b30:	bf1c      	itt	ne
   d6b32:	4610      	movne	r0, r2
   d6b34:	4619      	movne	r1, r3
   d6b36:	d10a      	bne.n	d6b4e <__aeabi_dmul+0x24a>
   d6b38:	ea81 0103 	eor.w	r1, r1, r3
   d6b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b48:	f04f 0000 	mov.w	r0, #0
   d6b4c:	bd70      	pop	{r4, r5, r6, pc}
   d6b4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b56:	bd70      	pop	{r4, r5, r6, pc}

000d6b58 <__aeabi_ddiv>:
   d6b58:	b570      	push	{r4, r5, r6, lr}
   d6b5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b66:	bf1d      	ittte	ne
   d6b68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b6c:	ea94 0f0c 	teqne	r4, ip
   d6b70:	ea95 0f0c 	teqne	r5, ip
   d6b74:	f000 f8a7 	bleq	d6cc6 <__aeabi_ddiv+0x16e>
   d6b78:	eba4 0405 	sub.w	r4, r4, r5
   d6b7c:	ea81 0e03 	eor.w	lr, r1, r3
   d6b80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b88:	f000 8088 	beq.w	d6c9c <__aeabi_ddiv+0x144>
   d6b8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6ba0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6ba4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ba8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6bac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6bb0:	429d      	cmp	r5, r3
   d6bb2:	bf08      	it	eq
   d6bb4:	4296      	cmpeq	r6, r2
   d6bb6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6bba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6bbe:	d202      	bcs.n	d6bc6 <__aeabi_ddiv+0x6e>
   d6bc0:	085b      	lsrs	r3, r3, #1
   d6bc2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bc6:	1ab6      	subs	r6, r6, r2
   d6bc8:	eb65 0503 	sbc.w	r5, r5, r3
   d6bcc:	085b      	lsrs	r3, r3, #1
   d6bce:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6bd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6bda:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bde:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6be2:	bf22      	ittt	cs
   d6be4:	1ab6      	subcs	r6, r6, r2
   d6be6:	4675      	movcs	r5, lr
   d6be8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6bec:	085b      	lsrs	r3, r3, #1
   d6bee:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bf2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bfa:	bf22      	ittt	cs
   d6bfc:	1ab6      	subcs	r6, r6, r2
   d6bfe:	4675      	movcs	r5, lr
   d6c00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6c04:	085b      	lsrs	r3, r3, #1
   d6c06:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c0a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c12:	bf22      	ittt	cs
   d6c14:	1ab6      	subcs	r6, r6, r2
   d6c16:	4675      	movcs	r5, lr
   d6c18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6c1c:	085b      	lsrs	r3, r3, #1
   d6c1e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c22:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6c2a:	bf22      	ittt	cs
   d6c2c:	1ab6      	subcs	r6, r6, r2
   d6c2e:	4675      	movcs	r5, lr
   d6c30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6c34:	ea55 0e06 	orrs.w	lr, r5, r6
   d6c38:	d018      	beq.n	d6c6c <__aeabi_ddiv+0x114>
   d6c3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6c3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6c42:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6c46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6c4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6c4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c56:	d1c0      	bne.n	d6bda <__aeabi_ddiv+0x82>
   d6c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c5c:	d10b      	bne.n	d6c76 <__aeabi_ddiv+0x11e>
   d6c5e:	ea41 0100 	orr.w	r1, r1, r0
   d6c62:	f04f 0000 	mov.w	r0, #0
   d6c66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c6a:	e7b6      	b.n	d6bda <__aeabi_ddiv+0x82>
   d6c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c70:	bf04      	itt	eq
   d6c72:	4301      	orreq	r1, r0
   d6c74:	2000      	moveq	r0, #0
   d6c76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c7a:	bf88      	it	hi
   d6c7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c80:	f63f aeaf 	bhi.w	d69e2 <__aeabi_dmul+0xde>
   d6c84:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c88:	bf04      	itt	eq
   d6c8a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c92:	f150 0000 	adcs.w	r0, r0, #0
   d6c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c9a:	bd70      	pop	{r4, r5, r6, pc}
   d6c9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6ca0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ca4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6ca8:	bfc2      	ittt	gt
   d6caa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6cb2:	bd70      	popgt	{r4, r5, r6, pc}
   d6cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6cb8:	f04f 0e00 	mov.w	lr, #0
   d6cbc:	3c01      	subs	r4, #1
   d6cbe:	e690      	b.n	d69e2 <__aeabi_dmul+0xde>
   d6cc0:	ea45 0e06 	orr.w	lr, r5, r6
   d6cc4:	e68d      	b.n	d69e2 <__aeabi_dmul+0xde>
   d6cc6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cca:	ea94 0f0c 	teq	r4, ip
   d6cce:	bf08      	it	eq
   d6cd0:	ea95 0f0c 	teqeq	r5, ip
   d6cd4:	f43f af3b 	beq.w	d6b4e <__aeabi_dmul+0x24a>
   d6cd8:	ea94 0f0c 	teq	r4, ip
   d6cdc:	d10a      	bne.n	d6cf4 <__aeabi_ddiv+0x19c>
   d6cde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6ce2:	f47f af34 	bne.w	d6b4e <__aeabi_dmul+0x24a>
   d6ce6:	ea95 0f0c 	teq	r5, ip
   d6cea:	f47f af25 	bne.w	d6b38 <__aeabi_dmul+0x234>
   d6cee:	4610      	mov	r0, r2
   d6cf0:	4619      	mov	r1, r3
   d6cf2:	e72c      	b.n	d6b4e <__aeabi_dmul+0x24a>
   d6cf4:	ea95 0f0c 	teq	r5, ip
   d6cf8:	d106      	bne.n	d6d08 <__aeabi_ddiv+0x1b0>
   d6cfa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cfe:	f43f aefd 	beq.w	d6afc <__aeabi_dmul+0x1f8>
   d6d02:	4610      	mov	r0, r2
   d6d04:	4619      	mov	r1, r3
   d6d06:	e722      	b.n	d6b4e <__aeabi_dmul+0x24a>
   d6d08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d0c:	bf18      	it	ne
   d6d0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d12:	f47f aec5 	bne.w	d6aa0 <__aeabi_dmul+0x19c>
   d6d16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6d1a:	f47f af0d 	bne.w	d6b38 <__aeabi_dmul+0x234>
   d6d1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6d22:	f47f aeeb 	bne.w	d6afc <__aeabi_dmul+0x1f8>
   d6d26:	e712      	b.n	d6b4e <__aeabi_dmul+0x24a>

000d6d28 <__gedf2>:
   d6d28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6d2c:	e006      	b.n	d6d3c <__cmpdf2+0x4>
   d6d2e:	bf00      	nop

000d6d30 <__ledf2>:
   d6d30:	f04f 0c01 	mov.w	ip, #1
   d6d34:	e002      	b.n	d6d3c <__cmpdf2+0x4>
   d6d36:	bf00      	nop

000d6d38 <__cmpdf2>:
   d6d38:	f04f 0c01 	mov.w	ip, #1
   d6d3c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6d40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d4c:	bf18      	it	ne
   d6d4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6d52:	d01b      	beq.n	d6d8c <__cmpdf2+0x54>
   d6d54:	b001      	add	sp, #4
   d6d56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6d5a:	bf0c      	ite	eq
   d6d5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6d60:	ea91 0f03 	teqne	r1, r3
   d6d64:	bf02      	ittt	eq
   d6d66:	ea90 0f02 	teqeq	r0, r2
   d6d6a:	2000      	moveq	r0, #0
   d6d6c:	4770      	bxeq	lr
   d6d6e:	f110 0f00 	cmn.w	r0, #0
   d6d72:	ea91 0f03 	teq	r1, r3
   d6d76:	bf58      	it	pl
   d6d78:	4299      	cmppl	r1, r3
   d6d7a:	bf08      	it	eq
   d6d7c:	4290      	cmpeq	r0, r2
   d6d7e:	bf2c      	ite	cs
   d6d80:	17d8      	asrcs	r0, r3, #31
   d6d82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6d86:	f040 0001 	orr.w	r0, r0, #1
   d6d8a:	4770      	bx	lr
   d6d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d94:	d102      	bne.n	d6d9c <__cmpdf2+0x64>
   d6d96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d9a:	d107      	bne.n	d6dac <__cmpdf2+0x74>
   d6d9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6da4:	d1d6      	bne.n	d6d54 <__cmpdf2+0x1c>
   d6da6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6daa:	d0d3      	beq.n	d6d54 <__cmpdf2+0x1c>
   d6dac:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6db0:	4770      	bx	lr
   d6db2:	bf00      	nop

000d6db4 <__aeabi_cdrcmple>:
   d6db4:	4684      	mov	ip, r0
   d6db6:	4610      	mov	r0, r2
   d6db8:	4662      	mov	r2, ip
   d6dba:	468c      	mov	ip, r1
   d6dbc:	4619      	mov	r1, r3
   d6dbe:	4663      	mov	r3, ip
   d6dc0:	e000      	b.n	d6dc4 <__aeabi_cdcmpeq>
   d6dc2:	bf00      	nop

000d6dc4 <__aeabi_cdcmpeq>:
   d6dc4:	b501      	push	{r0, lr}
   d6dc6:	f7ff ffb7 	bl	d6d38 <__cmpdf2>
   d6dca:	2800      	cmp	r0, #0
   d6dcc:	bf48      	it	mi
   d6dce:	f110 0f00 	cmnmi.w	r0, #0
   d6dd2:	bd01      	pop	{r0, pc}

000d6dd4 <__aeabi_dcmpeq>:
   d6dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dd8:	f7ff fff4 	bl	d6dc4 <__aeabi_cdcmpeq>
   d6ddc:	bf0c      	ite	eq
   d6dde:	2001      	moveq	r0, #1
   d6de0:	2000      	movne	r0, #0
   d6de2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6de6:	bf00      	nop

000d6de8 <__aeabi_dcmplt>:
   d6de8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6dec:	f7ff ffea 	bl	d6dc4 <__aeabi_cdcmpeq>
   d6df0:	bf34      	ite	cc
   d6df2:	2001      	movcc	r0, #1
   d6df4:	2000      	movcs	r0, #0
   d6df6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6dfa:	bf00      	nop

000d6dfc <__aeabi_dcmple>:
   d6dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e00:	f7ff ffe0 	bl	d6dc4 <__aeabi_cdcmpeq>
   d6e04:	bf94      	ite	ls
   d6e06:	2001      	movls	r0, #1
   d6e08:	2000      	movhi	r0, #0
   d6e0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e0e:	bf00      	nop

000d6e10 <__aeabi_dcmpge>:
   d6e10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e14:	f7ff ffce 	bl	d6db4 <__aeabi_cdrcmple>
   d6e18:	bf94      	ite	ls
   d6e1a:	2001      	movls	r0, #1
   d6e1c:	2000      	movhi	r0, #0
   d6e1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e22:	bf00      	nop

000d6e24 <__aeabi_dcmpgt>:
   d6e24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e28:	f7ff ffc4 	bl	d6db4 <__aeabi_cdrcmple>
   d6e2c:	bf34      	ite	cc
   d6e2e:	2001      	movcc	r0, #1
   d6e30:	2000      	movcs	r0, #0
   d6e32:	f85d fb08 	ldr.w	pc, [sp], #8
   d6e36:	bf00      	nop

000d6e38 <__aeabi_dcmpun>:
   d6e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e40:	d102      	bne.n	d6e48 <__aeabi_dcmpun+0x10>
   d6e42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6e46:	d10a      	bne.n	d6e5e <__aeabi_dcmpun+0x26>
   d6e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e50:	d102      	bne.n	d6e58 <__aeabi_dcmpun+0x20>
   d6e52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e56:	d102      	bne.n	d6e5e <__aeabi_dcmpun+0x26>
   d6e58:	f04f 0000 	mov.w	r0, #0
   d6e5c:	4770      	bx	lr
   d6e5e:	f04f 0001 	mov.w	r0, #1
   d6e62:	4770      	bx	lr

000d6e64 <__aeabi_d2iz>:
   d6e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e6c:	d215      	bcs.n	d6e9a <__aeabi_d2iz+0x36>
   d6e6e:	d511      	bpl.n	d6e94 <__aeabi_d2iz+0x30>
   d6e70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e78:	d912      	bls.n	d6ea0 <__aeabi_d2iz+0x3c>
   d6e7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6e8a:	fa23 f002 	lsr.w	r0, r3, r2
   d6e8e:	bf18      	it	ne
   d6e90:	4240      	negne	r0, r0
   d6e92:	4770      	bx	lr
   d6e94:	f04f 0000 	mov.w	r0, #0
   d6e98:	4770      	bx	lr
   d6e9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e9e:	d105      	bne.n	d6eac <__aeabi_d2iz+0x48>
   d6ea0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6ea4:	bf08      	it	eq
   d6ea6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6eaa:	4770      	bx	lr
   d6eac:	f04f 0000 	mov.w	r0, #0
   d6eb0:	4770      	bx	lr
   d6eb2:	bf00      	nop

000d6eb4 <__aeabi_d2f>:
   d6eb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6eb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6ebc:	bf24      	itt	cs
   d6ebe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6ec2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6ec6:	d90d      	bls.n	d6ee4 <__aeabi_d2f+0x30>
   d6ec8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6ecc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6ed0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6ed8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6edc:	bf08      	it	eq
   d6ede:	f020 0001 	biceq.w	r0, r0, #1
   d6ee2:	4770      	bx	lr
   d6ee4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6ee8:	d121      	bne.n	d6f2e <__aeabi_d2f+0x7a>
   d6eea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6eee:	bfbc      	itt	lt
   d6ef0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6ef4:	4770      	bxlt	lr
   d6ef6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6efa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6efe:	f1c2 0218 	rsb	r2, r2, #24
   d6f02:	f1c2 0c20 	rsb	ip, r2, #32
   d6f06:	fa10 f30c 	lsls.w	r3, r0, ip
   d6f0a:	fa20 f002 	lsr.w	r0, r0, r2
   d6f0e:	bf18      	it	ne
   d6f10:	f040 0001 	orrne.w	r0, r0, #1
   d6f14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6f1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6f20:	ea40 000c 	orr.w	r0, r0, ip
   d6f24:	fa23 f302 	lsr.w	r3, r3, r2
   d6f28:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6f2c:	e7cc      	b.n	d6ec8 <__aeabi_d2f+0x14>
   d6f2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6f32:	d107      	bne.n	d6f44 <__aeabi_d2f+0x90>
   d6f34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6f38:	bf1e      	ittt	ne
   d6f3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6f3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6f42:	4770      	bxne	lr
   d6f44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6f50:	4770      	bx	lr
   d6f52:	bf00      	nop

000d6f54 <atexit>:
   d6f54:	2300      	movs	r3, #0
   d6f56:	4601      	mov	r1, r0
   d6f58:	461a      	mov	r2, r3
   d6f5a:	4618      	mov	r0, r3
   d6f5c:	f000 b84a 	b.w	d6ff4 <__register_exitproc>

000d6f60 <memcpy>:
   d6f60:	440a      	add	r2, r1
   d6f62:	4291      	cmp	r1, r2
   d6f64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6f68:	d100      	bne.n	d6f6c <memcpy+0xc>
   d6f6a:	4770      	bx	lr
   d6f6c:	b510      	push	{r4, lr}
   d6f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f72:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f76:	4291      	cmp	r1, r2
   d6f78:	d1f9      	bne.n	d6f6e <memcpy+0xe>
   d6f7a:	bd10      	pop	{r4, pc}

000d6f7c <memset>:
   d6f7c:	4402      	add	r2, r0
   d6f7e:	4603      	mov	r3, r0
   d6f80:	4293      	cmp	r3, r2
   d6f82:	d100      	bne.n	d6f86 <memset+0xa>
   d6f84:	4770      	bx	lr
   d6f86:	f803 1b01 	strb.w	r1, [r3], #1
   d6f8a:	e7f9      	b.n	d6f80 <memset+0x4>

000d6f8c <srand>:
   d6f8c:	b538      	push	{r3, r4, r5, lr}
   d6f8e:	4b0d      	ldr	r3, [pc, #52]	; (d6fc4 <srand+0x38>)
   d6f90:	681d      	ldr	r5, [r3, #0]
   d6f92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f94:	4604      	mov	r4, r0
   d6f96:	b97b      	cbnz	r3, d6fb8 <srand+0x2c>
   d6f98:	2018      	movs	r0, #24
   d6f9a:	f7fd ffc7 	bl	d4f2c <malloc>
   d6f9e:	4a0a      	ldr	r2, [pc, #40]	; (d6fc8 <srand+0x3c>)
   d6fa0:	4b0a      	ldr	r3, [pc, #40]	; (d6fcc <srand+0x40>)
   d6fa2:	63a8      	str	r0, [r5, #56]	; 0x38
   d6fa4:	e9c0 2300 	strd	r2, r3, [r0]
   d6fa8:	4b09      	ldr	r3, [pc, #36]	; (d6fd0 <srand+0x44>)
   d6faa:	6083      	str	r3, [r0, #8]
   d6fac:	230b      	movs	r3, #11
   d6fae:	8183      	strh	r3, [r0, #12]
   d6fb0:	2201      	movs	r2, #1
   d6fb2:	2300      	movs	r3, #0
   d6fb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6fb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6fba:	2200      	movs	r2, #0
   d6fbc:	611c      	str	r4, [r3, #16]
   d6fbe:	615a      	str	r2, [r3, #20]
   d6fc0:	bd38      	pop	{r3, r4, r5, pc}
   d6fc2:	bf00      	nop
   d6fc4:	2003e484 	.word	0x2003e484
   d6fc8:	abcd330e 	.word	0xabcd330e
   d6fcc:	e66d1234 	.word	0xe66d1234
   d6fd0:	0005deec 	.word	0x0005deec

000d6fd4 <strcpy>:
   d6fd4:	4603      	mov	r3, r0
   d6fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6fda:	f803 2b01 	strb.w	r2, [r3], #1
   d6fde:	2a00      	cmp	r2, #0
   d6fe0:	d1f9      	bne.n	d6fd6 <strcpy+0x2>
   d6fe2:	4770      	bx	lr

000d6fe4 <strlen>:
   d6fe4:	4603      	mov	r3, r0
   d6fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fea:	2a00      	cmp	r2, #0
   d6fec:	d1fb      	bne.n	d6fe6 <strlen+0x2>
   d6fee:	1a18      	subs	r0, r3, r0
   d6ff0:	3801      	subs	r0, #1
   d6ff2:	4770      	bx	lr

000d6ff4 <__register_exitproc>:
   d6ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6ff8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d70b4 <__register_exitproc+0xc0>
   d6ffc:	4606      	mov	r6, r0
   d6ffe:	f8d8 0000 	ldr.w	r0, [r8]
   d7002:	461f      	mov	r7, r3
   d7004:	460d      	mov	r5, r1
   d7006:	4691      	mov	r9, r2
   d7008:	f000 f856 	bl	d70b8 <__retarget_lock_acquire_recursive>
   d700c:	4b25      	ldr	r3, [pc, #148]	; (d70a4 <__register_exitproc+0xb0>)
   d700e:	681c      	ldr	r4, [r3, #0]
   d7010:	b934      	cbnz	r4, d7020 <__register_exitproc+0x2c>
   d7012:	4c25      	ldr	r4, [pc, #148]	; (d70a8 <__register_exitproc+0xb4>)
   d7014:	601c      	str	r4, [r3, #0]
   d7016:	4b25      	ldr	r3, [pc, #148]	; (d70ac <__register_exitproc+0xb8>)
   d7018:	b113      	cbz	r3, d7020 <__register_exitproc+0x2c>
   d701a:	681b      	ldr	r3, [r3, #0]
   d701c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7020:	6863      	ldr	r3, [r4, #4]
   d7022:	2b1f      	cmp	r3, #31
   d7024:	dd07      	ble.n	d7036 <__register_exitproc+0x42>
   d7026:	f8d8 0000 	ldr.w	r0, [r8]
   d702a:	f000 f847 	bl	d70bc <__retarget_lock_release_recursive>
   d702e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7036:	b34e      	cbz	r6, d708c <__register_exitproc+0x98>
   d7038:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d703c:	b988      	cbnz	r0, d7062 <__register_exitproc+0x6e>
   d703e:	4b1c      	ldr	r3, [pc, #112]	; (d70b0 <__register_exitproc+0xbc>)
   d7040:	b923      	cbnz	r3, d704c <__register_exitproc+0x58>
   d7042:	f8d8 0000 	ldr.w	r0, [r8]
   d7046:	f000 f838 	bl	d70ba <__retarget_lock_release>
   d704a:	e7f0      	b.n	d702e <__register_exitproc+0x3a>
   d704c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7050:	f7fd ff6c 	bl	d4f2c <malloc>
   d7054:	2800      	cmp	r0, #0
   d7056:	d0f4      	beq.n	d7042 <__register_exitproc+0x4e>
   d7058:	2300      	movs	r3, #0
   d705a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d705e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7062:	6863      	ldr	r3, [r4, #4]
   d7064:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7068:	2201      	movs	r2, #1
   d706a:	409a      	lsls	r2, r3
   d706c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7070:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7074:	4313      	orrs	r3, r2
   d7076:	2e02      	cmp	r6, #2
   d7078:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d707c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7080:	bf02      	ittt	eq
   d7082:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7086:	431a      	orreq	r2, r3
   d7088:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d708c:	6863      	ldr	r3, [r4, #4]
   d708e:	f8d8 0000 	ldr.w	r0, [r8]
   d7092:	1c5a      	adds	r2, r3, #1
   d7094:	3302      	adds	r3, #2
   d7096:	6062      	str	r2, [r4, #4]
   d7098:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d709c:	f000 f80e 	bl	d70bc <__retarget_lock_release_recursive>
   d70a0:	2000      	movs	r0, #0
   d70a2:	e7c6      	b.n	d7032 <__register_exitproc+0x3e>
   d70a4:	2003e7e0 	.word	0x2003e7e0
   d70a8:	2003e754 	.word	0x2003e754
   d70ac:	00000000 	.word	0x00000000
   d70b0:	000d4f2d 	.word	0x000d4f2d
   d70b4:	2003e4e8 	.word	0x2003e4e8

000d70b8 <__retarget_lock_acquire_recursive>:
   d70b8:	4770      	bx	lr

000d70ba <__retarget_lock_release>:
   d70ba:	4770      	bx	lr

000d70bc <__retarget_lock_release_recursive>:
   d70bc:	4770      	bx	lr

000d70be <link_code_end>:
	...

000d70c0 <dynalib_user>:
   d70c0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d70d0:	0000 0000 742f 7365 0074 002e 6957 6946     ..../test...WiFi
   d70e0:	6320 6e6f 656e 7463 6465 0000                connected..

000d70ec <_ZTVN5spark13EthernetClassE>:
	...
   d70f4:	4ff3 000d 4fe9 000d 4fdf 000d 4fd5 000d     .O...O...O...O..
   d7104:	4fc9 000d 4fbd 000d 5279 000d 5281 000d     .O...O..yR...R..
   d7114:	4fb1 000d 4fa9 000d 4f9f 000d 4f95 000d     .O...O...O...O..
   d7124:	52b1 000d                                   .R..

000d7128 <_ZTV7TwoWire>:
	...
   d7130:	5011 000d 505b 000d 5033 000d 5013 000d     .P..[P..3P...P..
   d7140:	503b 000d 5043 000d 504b 000d 5053 000d     ;P..CP..KP..SP..

000d7150 <_ZTV9IPAddress>:
	...
   d7158:	5111 000d 5101 000d 5103 000d 7061 0070     .Q...Q...Q..app.

000d7168 <_ZTVN5spark12NetworkClassE>:
	...
   d7170:	5239 000d 5243 000d 524d 000d 5257 000d     9R..CR..MR..WR..
   d7180:	5261 000d 526d 000d 5279 000d 5281 000d     aR..mR..yR...R..
   d7190:	5289 000d 5295 000d 529d 000d 52a7 000d     .R...R...R...R..
   d71a0:	52b1 000d 5925 252d 2d6d 6425 2554 3a48     .R..%Y-%m-%dT%H:
   d71b0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d71c0 <_ZTV3UDP>:
	...
   d71c8:	5b55 000d 5b79 000d 55f1 000d 5719 000d     U[..y[...U...W..
   d71d8:	55e9 000d 5609 000d 5627 000d 5641 000d     .U...V..'V..AV..
   d71e8:	5665 000d 56fd 000d 59fb 000d 57a1 000d     eV...V...Y...W..
   d71f8:	5919 000d 55d1 000d 5ae5 000d 58a1 000d     .Y...U...Z...X..
   d7208:	57d9 000d 5b13 000d 5743 000d 55df 000d     .W...[..CW...U..
   d7218:	5781 000d 55e5 000d 5643 000d fff0 ffff     .W...U..CV......
   d7228:	0000 0000 565d 000d                         ....]V..

000d7230 <_ZTV11USARTSerial>:
	...
   d7238:	5b8d 000d 5bfb 000d 5bd3 000d 5399 000d     .[...[...[...S..
   d7248:	5ba3 000d 5bbf 000d 5bb1 000d 5bcd 000d     .[...[...[...[..
   d7258:	5b8f 000d 5b95 000d                         .[...[..

000d7260 <_ZTV9USBSerial>:
	...
   d7268:	5c87 000d 5cef 000d 5cc5 000d 5399 000d     .\...\...\...S..
   d7278:	5cb7 000d 5c89 000d 5c99 000d 5ce9 000d     .\...\...\...\..
   d7288:	5ca9 000d 5c81 000d                         .\...\..

000d7290 <_ZTVN5spark9WiFiClassE>:
	...
   d7298:	5def 000d 5de5 000d 5ddb 000d 5d91 000d     .]...]...]...]..
   d72a8:	5dcf 000d 5dc3 000d 5279 000d 5281 000d     .]...]..yR...R..
   d72b8:	5db7 000d 5daf 000d 5da5 000d 5d9b 000d     .]...]...]...]..
   d72c8:	52b1 000d                                   .R..

000d72cc <_ZSt7nothrow>:
   d72cc:	0000 0000                                   ....

000d72d0 <atanhi>:
   d72d0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   d72e0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000d72f0 <atanlo>:
   d72f0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   d7300:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<
   d7310:	7173 7472                                    sqrt.

000d7315 <link_const_variable_data_end>:
   d7315:	00          	.byte	0x00
	...

000d7318 <link_constructors_location>:
   d7318:	000d48fd 	.word	0x000d48fd
   d731c:	000d4f85 	.word	0x000d4f85
   d7320:	000d4ffd 	.word	0x000d4ffd
   d7324:	000d5229 	.word	0x000d5229
   d7328:	000d5385 	.word	0x000d5385
   d732c:	000d5461 	.word	0x000d5461
   d7330:	000d5599 	.word	0x000d5599
   d7334:	000d55bd 	.word	0x000d55bd
   d7338:	000d5df9 	.word	0x000d5df9

000d733c <link_constructors_end>:
   d733c:	00000000 	.word	0x00000000
